type: edu
files:
- name: browser.py
  visible: true
  text: |-
    #
    # import sys
    # import os
    # import requests
    # from bs4 import BeautifulSoup
    # from collections import deque
    #
    # dir_name = sys.argv[1]
    #
    # if not os.path.exists(dir_name):
    #     os.mkdir(dir_name)
    #
    # history = deque()
    #
    #
    # def get_site_content(url):
    #     r = requests.get(url)
    #     soup = BeautifulSoup(r.content, "html.parser")
    #     real_site = soup.find_all(["p", "h1", "h2", "h3", "h4", "h5", "h6", "span", "a", "ul", "ol", "li"])
    #     useful_list = []
    #     for page in real_site:
    #         useful_list.append(page.text + "\n")
    #     return useful_list
    #
    #
    # def save_site_content(data, path):
    #     history.append(filename(path))
    #     with open(os.path.join(dir_name, path), "w", encoding='utf-8') as f:
    #         f.write(data)
    #
    #
    # def go_site(site):
    #     address = site if site.startswith("https://") else f"https://{site}"
    #     site_content = get_site_content(address)
    #     it_is_the_site = "".join(site_content)
    #     save_site_content(it_is_the_site, filename(site))
    #     print(it_is_the_site)
    #
    # def filename(url):
    #     if not url.startswith('https://'):
    #         return url if not url.count('.') else url[:url.index('.')]
    #     else:
    #         return url[url.index('/')+2:url.index('.')]
    #
    # def go_back():
    #     if len(history) >= 2:
    #         history.pop()
    #         with open(os.path.join(dir_name, history.pop()), 'r', encoding='utf-8') as f:
    #             print(f.read())
    #
    #
    # while True:
    #     command = input()
    #     if command == "exit":
    #         break
    #     if command == "back":
    #         go_back()
    #     elif "." in command:
    #         go_site(command)
    #     else:
    #         try:
    #             with open(os.path.join(dir_name, filename(command)), 'r', encoding='utf-8') as f:
    #                 print(f.read())
    #         except:
    #             print("Invalid URL")

    import os
    import sys
    import requests
    from bs4 import BeautifulSoup



    dir_path = sys.argv[-1]
    stack = []

    if not dir_path:
        dir_path = 'dir-for-files'

    if not os.access(dir_path, os.F_OK):
        os.mkdir(dir_path)

    os.chdir(dir_path)



    def filename(url):
        if not url.startswith('https://'):
            return url if not url.count('.') else url[:url.index('.')]
        else:
            return url[url.index('/')+2:url.index('.')]

    def valid_url(url):
        if url.count('.') >= 1:
            return True

    def get_page(url):
        name = filename(url)
        working_url = url if url.startswith("https://") else f"https://{url}"
        print(name)
        print(os.access(name, os.F_OK))
        if valid_url(url) and not os.access(name, os.F_OK):
            r = requests.get(working_url)
            soup = BeautifulSoup(r.content, 'html.parser')
            lst = []
            with open(name, 'w', encoding='utf-8') as output:
                for i in soup.find_all(["p", "h1", "h2", "h3", "h4", "h5", "h6", "span", "a", "ul", "ol", "li"]):
                    lst.append(i.text)
                output.write(' '.join(lst))
            return ''.join(lst)
        else:
            with open(name, 'r', encoding='utf-8') as output:
                return ''.join(output.readlines())


    def back_button(lst):
        if len(lst) >= 2:
            lst.pop()
            return lst.pop()

    def site_var(url):
        return url.replace('.', '_')

    while True:
        inp = input()
        if inp == 'exit':
            break
        if inp == 'back':
            previous_page = back_button(stack)
            if previous_page:
                print(previous_page)
            else:
                continue
        try:
            content = get_page(inp)
            print(content)
            stack.append(content)
        except FileNotFoundError:
            print('Invalid URL')
  learner_created: false
- name: dirs/peps
  visible: true
  text: "Python Enhancement Proposals \nPython » \nPEP Index » \nPEP 8\n Python »\
    \  Python PEP Index »  PEP Index PEP 8 PEP 8 – Style Guide for Python Code \n\
    Introduction\nA Foolish Consistency is the Hobgoblin of Little Minds\nCode Lay-out\n\
    Indentation\nTabs or Spaces?\nMaximum Line Length\nShould a Line Break Before\
    \ or After a Binary Operator?\nBlank Lines\nSource File Encoding\nImports\nModule\
    \ Level Dunder Names\n\n\nString Quotes\nWhitespace in Expressions and Statements\n\
    Pet Peeves\nOther Recommendations\n\n\nWhen to Use Trailing Commas\nComments\n\
    Block Comments\nInline Comments\nDocumentation Strings\n\n\nNaming Conventions\n\
    Overriding Principle\nDescriptive: Naming Styles\nPrescriptive: Naming Conventions\n\
    Names to Avoid\nASCII Compatibility\nPackage and Module Names\nClass Names\nType\
    \ Variable Names\nException Names\nGlobal Variable Names\nFunction and Variable\
    \ Names\nFunction and Method Arguments\nMethod Names and Instance Variables\n\
    Constants\nDesigning for Inheritance\n\n\nPublic and Internal Interfaces\n\n\n\
    Programming Recommendations\nFunction Annotations\nVariable Annotations\n\n\n\
    References\nCopyright\n Introduction Introduction A Foolish Consistency is the\
    \ Hobgoblin of Little Minds A Foolish Consistency is the Hobgoblin of Little Minds\
    \ Code Lay-out\nIndentation\nTabs or Spaces?\nMaximum Line Length\nShould a Line\
    \ Break Before or After a Binary Operator?\nBlank Lines\nSource File Encoding\n\
    Imports\nModule Level Dunder Names\n\n Code Lay-out \nIndentation\nTabs or Spaces?\n\
    Maximum Line Length\nShould a Line Break Before or After a Binary Operator?\n\
    Blank Lines\nSource File Encoding\nImports\nModule Level Dunder Names\n Indentation\
    \ Indentation Tabs or Spaces? Tabs or Spaces? Maximum Line Length Maximum Line\
    \ Length Should a Line Break Before or After a Binary Operator? Should a Line\
    \ Break Before or After a Binary Operator? Blank Lines Blank Lines Source File\
    \ Encoding Source File Encoding Imports Imports Module Level Dunder Names Module\
    \ Level Dunder Names String Quotes String Quotes Whitespace in Expressions and\
    \ Statements\nPet Peeves\nOther Recommendations\n\n Whitespace in Expressions\
    \ and Statements \nPet Peeves\nOther Recommendations\n Pet Peeves Pet Peeves Other\
    \ Recommendations Other Recommendations When to Use Trailing Commas When to Use\
    \ Trailing Commas Comments\nBlock Comments\nInline Comments\nDocumentation Strings\n\
    \n Comments \nBlock Comments\nInline Comments\nDocumentation Strings\n Block Comments\
    \ Block Comments Inline Comments Inline Comments Documentation Strings Documentation\
    \ Strings Naming Conventions\nOverriding Principle\nDescriptive: Naming Styles\n\
    Prescriptive: Naming Conventions\nNames to Avoid\nASCII Compatibility\nPackage\
    \ and Module Names\nClass Names\nType Variable Names\nException Names\nGlobal\
    \ Variable Names\nFunction and Variable Names\nFunction and Method Arguments\n\
    Method Names and Instance Variables\nConstants\nDesigning for Inheritance\n\n\n\
    Public and Internal Interfaces\n\n Naming Conventions \nOverriding Principle\n\
    Descriptive: Naming Styles\nPrescriptive: Naming Conventions\nNames to Avoid\n\
    ASCII Compatibility\nPackage and Module Names\nClass Names\nType Variable Names\n\
    Exception Names\nGlobal Variable Names\nFunction and Variable Names\nFunction\
    \ and Method Arguments\nMethod Names and Instance Variables\nConstants\nDesigning\
    \ for Inheritance\n\n\nPublic and Internal Interfaces\n Overriding Principle Overriding\
    \ Principle Descriptive: Naming Styles Descriptive: Naming Styles Prescriptive:\
    \ Naming Conventions\nNames to Avoid\nASCII Compatibility\nPackage and Module\
    \ Names\nClass Names\nType Variable Names\nException Names\nGlobal Variable Names\n\
    Function and Variable Names\nFunction and Method Arguments\nMethod Names and Instance\
    \ Variables\nConstants\nDesigning for Inheritance\n\n Prescriptive: Naming Conventions\
    \ \nNames to Avoid\nASCII Compatibility\nPackage and Module Names\nClass Names\n\
    Type Variable Names\nException Names\nGlobal Variable Names\nFunction and Variable\
    \ Names\nFunction and Method Arguments\nMethod Names and Instance Variables\n\
    Constants\nDesigning for Inheritance\n Names to Avoid Names to Avoid ASCII Compatibility\
    \ ASCII Compatibility Package and Module Names Package and Module Names Class\
    \ Names Class Names Type Variable Names Type Variable Names Exception Names Exception\
    \ Names Global Variable Names Global Variable Names Function and Variable Names\
    \ Function and Variable Names Function and Method Arguments Function and Method\
    \ Arguments Method Names and Instance Variables Method Names and Instance Variables\
    \ Constants Constants Designing for Inheritance Designing for Inheritance Public\
    \ and Internal Interfaces Public and Internal Interfaces Programming Recommendations\n\
    Function Annotations\nVariable Annotations\n\n Programming Recommendations \n\
    Function Annotations\nVariable Annotations\n Function Annotations Function Annotations\
    \ Variable Annotations Variable Annotations References References Copyright Copyright\
    \ Introduction Introduction This document gives coding conventions for the Python\
    \ code comprising\nthe standard library in the main Python distribution.  Please\
    \ see the\ncompanion informational PEP describing style guidelines for the C code\n\
    in the C implementation of Python. style guidelines for the C code\nin the C implementation\
    \ of Python This document and PEP 257 (Docstring Conventions) were adapted from\n\
    Guido’s original Python Style Guide essay, with some additions from\nBarry’s style\
    \ guide [2]. PEP 257 [2] This style guide evolves over time as additional conventions\
    \ are\nidentified and past conventions are rendered obsolete by changes in\nthe\
    \ language itself. Many projects have their own coding style guidelines. In the\
    \ event of any\nconflicts, such project-specific guides take precedence for that\
    \ project. A Foolish Consistency is the Hobgoblin of Little Minds A Foolish Consistency\
    \ is the Hobgoblin of Little Minds One of Guido’s key insights is that code is\
    \ read much more often than\nit is written.  The guidelines provided here are\
    \ intended to improve\nthe readability of code and make it consistent across the\
    \ wide\nspectrum of Python code.  As PEP 20 says, “Readability counts”. PEP 20\
    \ A style guide is about consistency.  Consistency with this style guide\nis important.\
    \  Consistency within a project is more important.\nConsistency within one module\
    \ or function is the most important. However, know when to be inconsistent – sometimes\
    \ style guide\nrecommendations just aren’t applicable.  When in doubt, use your\
    \ best\njudgment.  Look at other examples and decide what looks best.  And\ndon’\
    t hesitate to ask! In particular: do not break backwards compatibility just to\
    \ comply with\nthis PEP! Some other good reasons to ignore a particular guideline:\
    \ \nWhen applying the guideline would make the code less readable, even\nfor someone\
    \ who is used to reading code that follows this PEP.\nTo be consistent with surrounding\
    \ code that also breaks it (maybe\nfor historic reasons) – although this is also\
    \ an opportunity to\nclean up someone else’s mess (in true XP style).\nBecause\
    \ the code in question predates the introduction of the\nguideline and there is\
    \ no other reason to be modifying that code.\nWhen the code needs to remain compatible\
    \ with older versions of\nPython that don’t support the feature recommended by\
    \ the style guide.\n When applying the guideline would make the code less readable,\
    \ even\nfor someone who is used to reading code that follows this PEP. To be consistent\
    \ with surrounding code that also breaks it (maybe\nfor historic reasons) – although\
    \ this is also an opportunity to\nclean up someone else’s mess (in true XP style).\
    \ Because the code in question predates the introduction of the\nguideline and\
    \ there is no other reason to be modifying that code. When the code needs to remain\
    \ compatible with older versions of\nPython that don’t support the feature recommended\
    \ by the style guide. Code Lay-out Code Lay-out Indentation Indentation Use 4\
    \ spaces per indentation level. Continuation lines should align wrapped elements\
    \ either vertically\nusing Python’s implicit line joining inside parentheses,\
    \ brackets and\nbraces, or using a hanging indent [1].  When using a hanging\n\
    indent the following should be considered; there should be no\narguments on the\
    \ first line and further indentation should be used to\nclearly distinguish itself\
    \ as a continuation line: [1] The 4-space rule is optional for continuation lines.\
    \ Optional: When the conditional part of an if-statement is long enough to require\n\
    that it be written across multiple lines, it’s worth noting that the\ncombination\
    \ of a two character keyword (i.e. if), plus a single space,\nplus an opening\
    \ parenthesis creates a natural 4-space indent for the\nsubsequent lines of the\
    \ multiline conditional.  This can produce a visual\nconflict with the indented\
    \ suite of code nested inside the if-statement,\nwhich would also naturally be\
    \ indented to 4 spaces.  This PEP takes no\nexplicit position on how (or whether)\
    \ to further visually distinguish such\nconditional lines from the nested suite\
    \ inside the if-statement.\nAcceptable options in this situation include, but\
    \ are not limited to: (Also see the discussion of whether to break before or after\
    \ binary\noperators below.) The closing brace/bracket/parenthesis on multiline\
    \ constructs may\neither line up under the first non-whitespace character of the\
    \ last\nline of list, as in: or it may be lined up under the first character of\
    \ the line that\nstarts the multiline construct, as in: Tabs or Spaces? Tabs or\
    \ Spaces? Spaces are the preferred indentation method. Tabs should be used solely\
    \ to remain consistent with code that is\nalready indented with tabs. Python disallows\
    \ mixing tabs and spaces for indentation. Maximum Line Length Maximum Line Length\
    \ Limit all lines to a maximum of 79 characters. For flowing long blocks of text\
    \ with fewer structural restrictions\n(docstrings or comments), the line length\
    \ should be limited to 72\ncharacters. Limiting the required editor window width\
    \ makes it possible to have\nseveral files open side by side, and works well when\
    \ using code\nreview tools that present the two versions in adjacent columns.\
    \ The default wrapping in most tools disrupts the visual structure of the\ncode,\
    \ making it more difficult to understand. The limits are chosen to\navoid wrapping\
    \ in editors with the window width set to 80, even\nif the tool places a marker\
    \ glyph in the final column when wrapping\nlines. Some web based tools may not\
    \ offer dynamic line wrapping at all. Some teams strongly prefer a longer line\
    \ length.  For code maintained\nexclusively or primarily by a team that can reach\
    \ agreement on this\nissue, it is okay to increase the line length limit up to\
    \ 99 characters,\nprovided that comments and docstrings are still wrapped at 72\n\
    characters. The Python standard library is conservative and requires limiting\n\
    lines to 79 characters (and docstrings/comments to 72). The preferred way of wrapping\
    \ long lines is by using Python’s implied\nline continuation inside parentheses,\
    \ brackets and braces.  Long lines\ncan be broken over multiple lines by wrapping\
    \ expressions in\nparentheses. These should be used in preference to using a backslash\n\
    for line continuation. Backslashes may still be appropriate at times.  For example,\
    \ long,\nmultiple with-statements could not use implicit continuation\nbefore\
    \ Python 3.10, so backslashes were acceptable for that case: (See the previous\
    \ discussion on multiline if-statements for further\nthoughts on the indentation\
    \ of such multiline with-statements.) multiline if-statements Another such case\
    \ is with assert statements. Make sure to indent the continued line appropriately.\
    \ Should a Line Break Before or After a Binary Operator? Should a Line Break Before\
    \ or After a Binary Operator? For decades the recommended style was to break after\
    \ binary operators.\nBut this can hurt readability in two ways: the operators\
    \ tend to get\nscattered across different columns on the screen, and each operator\
    \ is\nmoved away from its operand and onto the previous line.  Here, the eye\n\
    has to do extra work to tell which items are added and which are\nsubtracted:\
    \ To solve this readability problem, mathematicians and their publishers\nfollow\
    \ the opposite convention.  Donald Knuth explains the traditional\nrule in his\
    \ Computers and Typesetting series: “Although formulas\nwithin a paragraph always\
    \ break after binary operations and relations,\ndisplayed formulas always break\
    \ before binary operations” [3]. [3] Following the tradition from mathematics\
    \ usually results in more\nreadable code: In Python code, it is permissible to\
    \ break before or after a binary\noperator, as long as the convention is consistent\
    \ locally.  For new\ncode Knuth’s style is suggested. Blank Lines Blank Lines\
    \ Surround top-level function and class definitions with two blank\nlines. Method\
    \ definitions inside a class are surrounded by a single blank\nline. Extra blank\
    \ lines may be used (sparingly) to separate groups of\nrelated functions.  Blank\
    \ lines may be omitted between a bunch of\nrelated one-liners (e.g. a set of dummy\
    \ implementations). Use blank lines in functions, sparingly, to indicate logical\
    \ sections. Python accepts the control-L (i.e. ^L) form feed character as\nwhitespace;\
    \ many tools treat these characters as page separators, so\nyou may use them to\
    \ separate pages of related sections of your file.\nNote, some editors and web-based\
    \ code viewers may not recognize\ncontrol-L as a form feed and will show another\
    \ glyph in its place. Source File Encoding Source File Encoding Code in the core\
    \ Python distribution should always use UTF-8, and should not\nhave an encoding\
    \ declaration. In the standard library, non-UTF-8 encodings should be used only\
    \ for\ntest purposes. Use non-ASCII characters sparingly, preferably only to\n\
    denote places and human names. If using non-ASCII characters as data,\navoid noisy\
    \ Unicode characters like z̯̯͡a̧͎̺l̡͓̫g̹̲o̡̼̘ and byte order\nmarks. All identifiers\
    \ in the Python standard library MUST use ASCII-only\nidentifiers, and SHOULD\
    \ use English words wherever feasible (in many\ncases, abbreviations and technical\
    \ terms are used which aren’t\nEnglish). Open source projects with a global audience\
    \ are encouraged to adopt a\nsimilar policy. Imports Imports \nImports should\
    \ usually be on separate lines:# Correct:\nimport os\nimport sys\n\n\n# Wrong:\n\
    import sys, os\n\n\nIt’s okay to say this though:\n# Correct:\nfrom subprocess\
    \ import Popen, PIPE\n\n\n\nImports are always put at the top of the file, just\
    \ after any module\ncomments and docstrings, and before module globals and constants.Imports\
    \ should be grouped in the following order:\n\nStandard library imports.\nRelated\
    \ third party imports.\nLocal application/library specific imports.\n\nYou should\
    \ put a blank line between each group of imports.\n\nAbsolute imports are recommended,\
    \ as they are usually more readable\nand tend to be better behaved (or at least\
    \ give better error\nmessages) if the import system is incorrectly configured\
    \ (such as\nwhen a directory inside a package ends up on sys.path):import mypkg.sibling\n\
    from mypkg import sibling\nfrom mypkg.sibling import example\n\n\nHowever, explicit\
    \ relative imports are an acceptable alternative to\nabsolute imports, especially\
    \ when dealing with complex package layouts\nwhere using absolute imports would\
    \ be unnecessarily verbose:\nfrom . import sibling\nfrom .sibling import example\n\
    \n\nStandard library code should avoid complex package layouts and always\nuse\
    \ absolute imports.\n\nWhen importing a class from a class-containing module,\
    \ it’s usually\nokay to spell this:from myclass import MyClass\nfrom foo.bar.yourclass\
    \ import YourClass\n\n\nIf this spelling causes local name clashes, then spell\
    \ them explicitly:\nimport myclass\nimport foo.bar.yourclass\n\n\nand use “myclass.MyClass”\
    \ and “foo.bar.yourclass.YourClass”.\n\nWildcard imports (from <module> import\
    \ *) should be avoided, as\nthey make it unclear which names are present in the\
    \ namespace,\nconfusing both readers and many automated tools. There is one\n\
    defensible use case for a wildcard import, which is to republish an\ninternal\
    \ interface as part of a public API (for example, overwriting\na pure Python implementation\
    \ of an interface with the definitions\nfrom an optional accelerator module and\
    \ exactly which definitions\nwill be overwritten isn’t known in advance).When\
    \ republishing names this way, the guidelines below regarding\npublic and internal\
    \ interfaces still apply.\n\n Imports should usually be on separate lines:# Correct:\n\
    import os\nimport sys\n\n\n# Wrong:\nimport sys, os\n\n\nIt’s okay to say this\
    \ though:\n# Correct:\nfrom subprocess import Popen, PIPE\n\n\n It’s okay to say\
    \ this though: Imports are always put at the top of the file, just after any module\n\
    comments and docstrings, and before module globals and constants.Imports should\
    \ be grouped in the following order:\n\nStandard library imports.\nRelated third\
    \ party imports.\nLocal application/library specific imports.\n\nYou should put\
    \ a blank line between each group of imports.\n Imports should be grouped in the\
    \ following order: \nStandard library imports.\nRelated third party imports.\n\
    Local application/library specific imports.\n Standard library imports. Related\
    \ third party imports. Local application/library specific imports. You should\
    \ put a blank line between each group of imports. Absolute imports are recommended,\
    \ as they are usually more readable\nand tend to be better behaved (or at least\
    \ give better error\nmessages) if the import system is incorrectly configured\
    \ (such as\nwhen a directory inside a package ends up on sys.path):import mypkg.sibling\n\
    from mypkg import sibling\nfrom mypkg.sibling import example\n\n\nHowever, explicit\
    \ relative imports are an acceptable alternative to\nabsolute imports, especially\
    \ when dealing with complex package layouts\nwhere using absolute imports would\
    \ be unnecessarily verbose:\nfrom . import sibling\nfrom .sibling import example\n\
    \n\nStandard library code should avoid complex package layouts and always\nuse\
    \ absolute imports.\n However, explicit relative imports are an acceptable alternative\
    \ to\nabsolute imports, especially when dealing with complex package layouts\n\
    where using absolute imports would be unnecessarily verbose: Standard library\
    \ code should avoid complex package layouts and always\nuse absolute imports.\
    \ When importing a class from a class-containing module, it’s usually\nokay to\
    \ spell this:from myclass import MyClass\nfrom foo.bar.yourclass import YourClass\n\
    \n\nIf this spelling causes local name clashes, then spell them explicitly:\n\
    import myclass\nimport foo.bar.yourclass\n\n\nand use “myclass.MyClass” and “\
    foo.bar.yourclass.YourClass”.\n If this spelling causes local name clashes, then\
    \ spell them explicitly: and use “myclass.MyClass” and “foo.bar.yourclass.YourClass”\
    . Wildcard imports (from <module> import *) should be avoided, as\nthey make it\
    \ unclear which names are present in the namespace,\nconfusing both readers and\
    \ many automated tools. There is one\ndefensible use case for a wildcard import,\
    \ which is to republish an\ninternal interface as part of a public API (for example,\
    \ overwriting\na pure Python implementation of an interface with the definitions\n\
    from an optional accelerator module and exactly which definitions\nwill be overwritten\
    \ isn’t known in advance).When republishing names this way, the guidelines below\
    \ regarding\npublic and internal interfaces still apply.\n When republishing names\
    \ this way, the guidelines below regarding\npublic and internal interfaces still\
    \ apply. Module Level Dunder Names Module Level Dunder Names Module level “dunders”\
    \ (i.e. names with two leading and two trailing\nunderscores) such as __all__,\
    \ __author__, __version__,\netc. should be placed after the module docstring but\
    \ before any import\nstatements except from __future__ imports.  Python mandates\
    \ that\nfuture-imports must appear in the module before any other code except\n\
    docstrings: String Quotes String Quotes In Python, single-quoted strings and double-quoted\
    \ strings are the\nsame.  This PEP does not make a recommendation for this.  Pick\
    \ a rule\nand stick to it.  When a string contains single or double quote\ncharacters,\
    \ however, use the other one to avoid backslashes in the\nstring. It improves\
    \ readability. For triple-quoted strings, always use double quote characters to\
    \ be\nconsistent with the docstring convention in PEP 257. PEP 257 Whitespace\
    \ in Expressions and Statements Whitespace in Expressions and Statements Pet Peeves\
    \ Pet Peeves Avoid extraneous whitespace in the following situations: \nImmediately\
    \ inside parentheses, brackets or braces:# Correct:\nspam(ham[1], {eggs: 2})\n\
    \n\n# Wrong:\nspam( ham[ 1 ], { eggs: 2 } )\n\n\n\nBetween a trailing comma and\
    \ a following close parenthesis:# Correct:\nfoo = (0,)\n\n\n# Wrong:\nbar = (0,\
    \ )\n\n\n\nImmediately before a comma, semicolon, or colon:# Correct:\nif x ==\
    \ 4: print(x, y); x, y = y, x\n\n\n# Wrong:\nif x == 4 : print(x , y) ; x , y\
    \ = y , x\n\n\n\nHowever, in a slice the colon acts like a binary operator, and\n\
    should have equal amounts on either side (treating it as the\noperator with the\
    \ lowest priority).  In an extended slice, both\ncolons must have the same amount\
    \ of spacing applied.  Exception:\nwhen a slice parameter is omitted, the space\
    \ is omitted:# Correct:\nham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\n\
    ham[lower:upper], ham[lower:upper:], ham[lower::step]\nham[lower+offset : upper+offset]\n\
    ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\nham[lower + offset : upper\
    \ + offset]\n\n\n# Wrong:\nham[lower + offset:upper + offset]\nham[1: 9], ham[1\
    \ :9], ham[1:9 :3]\nham[lower : : step]\nham[ : upper]\n\n\n\nImmediately before\
    \ the open parenthesis that starts the argument\nlist of a function call:# Correct:\n\
    spam(1)\n\n\n# Wrong:\nspam (1)\n\n\n\nImmediately before the open parenthesis\
    \ that starts an indexing or\nslicing:# Correct:\ndct['key'] = lst[index]\n\n\n\
    # Wrong:\ndct ['key'] = lst [index]\n\n\n\nMore than one space around an assignment\
    \ (or other) operator to\nalign it with another:# Correct:\nx = 1\ny = 2\nlong_variable\
    \ = 3\n\n\n# Wrong:\nx             = 1\ny             = 2\nlong_variable = 3\n\
    \n\n\n Immediately inside parentheses, brackets or braces:# Correct:\nspam(ham[1],\
    \ {eggs: 2})\n\n\n# Wrong:\nspam( ham[ 1 ], { eggs: 2 } )\n\n\n Between a trailing\
    \ comma and a following close parenthesis:# Correct:\nfoo = (0,)\n\n\n# Wrong:\n\
    bar = (0, )\n\n\n Immediately before a comma, semicolon, or colon:# Correct:\n\
    if x == 4: print(x, y); x, y = y, x\n\n\n# Wrong:\nif x == 4 : print(x , y) ;\
    \ x , y = y , x\n\n\n However, in a slice the colon acts like a binary operator,\
    \ and\nshould have equal amounts on either side (treating it as the\noperator\
    \ with the lowest priority).  In an extended slice, both\ncolons must have the\
    \ same amount of spacing applied.  Exception:\nwhen a slice parameter is omitted,\
    \ the space is omitted:# Correct:\nham[1:9], ham[1:9:3], ham[:9:3], ham[1::3],\
    \ ham[1:9:]\nham[lower:upper], ham[lower:upper:], ham[lower::step]\nham[lower+offset\
    \ : upper+offset]\nham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\nham[lower\
    \ + offset : upper + offset]\n\n\n# Wrong:\nham[lower + offset:upper + offset]\n\
    ham[1: 9], ham[1 :9], ham[1:9 :3]\nham[lower : : step]\nham[ : upper]\n\n\n Immediately\
    \ before the open parenthesis that starts the argument\nlist of a function call:#\
    \ Correct:\nspam(1)\n\n\n# Wrong:\nspam (1)\n\n\n Immediately before the open\
    \ parenthesis that starts an indexing or\nslicing:# Correct:\ndct['key'] = lst[index]\n\
    \n\n# Wrong:\ndct ['key'] = lst [index]\n\n\n More than one space around an assignment\
    \ (or other) operator to\nalign it with another:# Correct:\nx = 1\ny = 2\nlong_variable\
    \ = 3\n\n\n# Wrong:\nx             = 1\ny             = 2\nlong_variable = 3\n\
    \n\n Other Recommendations Other Recommendations \nAvoid trailing whitespace anywhere.\
    \  Because it’s usually invisible,\nit can be confusing: e.g. a backslash followed\
    \ by a space and a\nnewline does not count as a line continuation marker.  Some\
    \ editors\ndon’t preserve it and many projects (like CPython itself) have\npre-commit\
    \ hooks that reject it.\nAlways surround these binary operators with a single\
    \ space on either\nside: assignment (=), augmented assignment (+=, -=\netc.),\
    \ comparisons (==, <, >, !=, <>, <=,\n>=, in, not in, is, is not), Booleans (and,\n\
    or, not).\nIf operators with different priorities are used, consider adding\n\
    whitespace around the operators with the lowest priority(ies). Use\nyour own judgment;\
    \ however, never use more than one space, and\nalways have the same amount of\
    \ whitespace on both sides of a binary\noperator:# Correct:\ni = i + 1\nsubmitted\
    \ += 1\nx = x*2 - 1\nhypot2 = x*x + y*y\nc = (a+b) * (a-b)\n\n\n# Wrong:\ni=i+1\n\
    submitted +=1\nx = x * 2 - 1\nhypot2 = x * x + y * y\nc = (a + b) * (a - b)\n\n\
    \n\nFunction annotations should use the normal rules for colons and\nalways have\
    \ spaces around the -> arrow if present.  (See\nFunction Annotations below for\
    \ more about function annotations.):# Correct:\ndef munge(input: AnyStr): ...\n\
    def munge() -> PosInt: ...\n\n\n# Wrong:\ndef munge(input:AnyStr): ...\ndef munge()->PosInt:\
    \ ...\n\n\n\nDon’t use spaces around the = sign when used to indicate a\nkeyword\
    \ argument, or when used to indicate a default value for an\nunannotated function\
    \ parameter:# Correct:\ndef complex(real, imag=0.0):\n    return magic(r=real,\
    \ i=imag)\n\n\n# Wrong:\ndef complex(real, imag = 0.0):\n    return magic(r =\
    \ real, i = imag)\n\n\nWhen combining an argument annotation with a default value,\
    \ however, do use\nspaces around the = sign:\n# Correct:\ndef munge(sep: AnyStr\
    \ = None): ...\ndef munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n\
    \n\n# Wrong:\ndef munge(input: AnyStr=None): ...\ndef munge(input: AnyStr, limit\
    \ = 1000): ...\n\n\n\nCompound statements (multiple statements on the same line)\
    \ are\ngenerally discouraged:# Correct:\nif foo == 'blah':\n    do_blah_thing()\n\
    do_one()\ndo_two()\ndo_three()\n\n\nRather not:\n# Wrong:\nif foo == 'blah': do_blah_thing()\n\
    do_one(); do_two(); do_three()\n\n\n\nWhile sometimes it’s okay to put an if/for/while\
    \ with a small body\non the same line, never do this for multi-clause statements.\
    \  Also\navoid folding such long lines!Rather not:\n# Wrong:\nif foo == 'blah':\
    \ do_blah_thing()\nfor x in lst: total += x\nwhile t < 10: t = delay()\n\n\nDefinitely\
    \ not:\n# Wrong:\nif foo == 'blah': do_blah_thing()\nelse: do_non_blah_thing()\n\
    \ntry: something()\nfinally: cleanup()\n\ndo_one(); do_two(); do_three(long, argument,\n\
    \                             list, like, this)\n\nif foo == 'blah': one(); two();\
    \ three()\n\n\n\n Avoid trailing whitespace anywhere.  Because it’s usually invisible,\n\
    it can be confusing: e.g. a backslash followed by a space and a\nnewline does\
    \ not count as a line continuation marker.  Some editors\ndon’t preserve it and\
    \ many projects (like CPython itself) have\npre-commit hooks that reject it. Always\
    \ surround these binary operators with a single space on either\nside: assignment\
    \ (=), augmented assignment (+=, -=\netc.), comparisons (==, <, >, !=, <>, <=,\n\
    >=, in, not in, is, is not), Booleans (and,\nor, not). If operators with different\
    \ priorities are used, consider adding\nwhitespace around the operators with the\
    \ lowest priority(ies). Use\nyour own judgment; however, never use more than one\
    \ space, and\nalways have the same amount of whitespace on both sides of a binary\n\
    operator:# Correct:\ni = i + 1\nsubmitted += 1\nx = x*2 - 1\nhypot2 = x*x + y*y\n\
    c = (a+b) * (a-b)\n\n\n# Wrong:\ni=i+1\nsubmitted +=1\nx = x * 2 - 1\nhypot2 =\
    \ x * x + y * y\nc = (a + b) * (a - b)\n\n\n Function annotations should use the\
    \ normal rules for colons and\nalways have spaces around the -> arrow if present.\
    \  (See\nFunction Annotations below for more about function annotations.):# Correct:\n\
    def munge(input: AnyStr): ...\ndef munge() -> PosInt: ...\n\n\n# Wrong:\ndef munge(input:AnyStr):\
    \ ...\ndef munge()->PosInt: ...\n\n\n Function Annotations Don’t use spaces around\
    \ the = sign when used to indicate a\nkeyword argument, or when used to indicate\
    \ a default value for an\nunannotated function parameter:# Correct:\ndef complex(real,\
    \ imag=0.0):\n    return magic(r=real, i=imag)\n\n\n# Wrong:\ndef complex(real,\
    \ imag = 0.0):\n    return magic(r = real, i = imag)\n\n\nWhen combining an argument\
    \ annotation with a default value, however, do use\nspaces around the = sign:\n\
    # Correct:\ndef munge(sep: AnyStr = None): ...\ndef munge(input: AnyStr, sep:\
    \ AnyStr = None, limit=1000): ...\n\n\n# Wrong:\ndef munge(input: AnyStr=None):\
    \ ...\ndef munge(input: AnyStr, limit = 1000): ...\n\n\n When combining an argument\
    \ annotation with a default value, however, do use\nspaces around the = sign:\
    \ Compound statements (multiple statements on the same line) are\ngenerally discouraged:#\
    \ Correct:\nif foo == 'blah':\n    do_blah_thing()\ndo_one()\ndo_two()\ndo_three()\n\
    \n\nRather not:\n# Wrong:\nif foo == 'blah': do_blah_thing()\ndo_one(); do_two();\
    \ do_three()\n\n\n Rather not: While sometimes it’s okay to put an if/for/while\
    \ with a small body\non the same line, never do this for multi-clause statements.\
    \  Also\navoid folding such long lines!Rather not:\n# Wrong:\nif foo == 'blah':\
    \ do_blah_thing()\nfor x in lst: total += x\nwhile t < 10: t = delay()\n\n\nDefinitely\
    \ not:\n# Wrong:\nif foo == 'blah': do_blah_thing()\nelse: do_non_blah_thing()\n\
    \ntry: something()\nfinally: cleanup()\n\ndo_one(); do_two(); do_three(long, argument,\n\
    \                             list, like, this)\n\nif foo == 'blah': one(); two();\
    \ three()\n\n\n Rather not: Definitely not: When to Use Trailing Commas When to\
    \ Use Trailing Commas Trailing commas are usually optional, except they are mandatory\
    \ when\nmaking a tuple of one element.  For clarity, it is recommended to\nsurround\
    \ the latter in (technically redundant) parentheses: When trailing commas are\
    \ redundant, they are often helpful when a\nversion control system is used, when\
    \ a list of values, arguments or\nimported items is expected to be extended over\
    \ time.  The pattern is\nto put each value (etc.) on a line by itself, always\
    \ adding a trailing\ncomma, and add the close parenthesis/bracket/brace on the\
    \ next line.\nHowever it does not make sense to have a trailing comma on the same\n\
    line as the closing delimiter (except in the above case of singleton\ntuples):\
    \ Comments Comments Comments that contradict the code are worse than no comments.\
    \  Always\nmake a priority of keeping the comments up-to-date when the code\n\
    changes! Comments should be complete sentences.  The first word should be\ncapitalized,\
    \ unless it is an identifier that begins with a lower case\nletter (never alter\
    \ the case of identifiers!). Block comments generally consist of one or more paragraphs\
    \ built out of\ncomplete sentences, with each sentence ending in a period. You\
    \ should use one or two spaces after a sentence-ending period in\nmulti-sentence\
    \ comments, except after the final sentence. Ensure that your comments are clear\
    \ and easily understandable to other\nspeakers of the language you are writing\
    \ in. Python coders from non-English speaking countries: please write your\ncomments\
    \ in English, unless you are 120% sure that the code will never\nbe read by people\
    \ who don’t speak your language. Block Comments Block Comments Block comments\
    \ generally apply to some (or all) code that follows\nthem, and are indented to\
    \ the same level as that code.  Each line of a\nblock comment starts with a #\
    \ and a single space (unless it is\nindented text inside the comment). Paragraphs\
    \ inside a block comment are separated by a line containing a\nsingle #. Inline\
    \ Comments Inline Comments Use inline comments sparingly. An inline comment is\
    \ a comment on the same line as a statement.\nInline comments should be separated\
    \ by at least two spaces from the\nstatement.  They should start with a # and\
    \ a single space. Inline comments are unnecessary and in fact distracting if they\
    \ state\nthe obvious.  Don’t do this: But sometimes, this is useful: Documentation\
    \ Strings Documentation Strings Conventions for writing good documentation strings\n\
    (a.k.a. “docstrings”) are immortalized in PEP 257. PEP 257 \nWrite docstrings\
    \ for all public modules, functions, classes, and\nmethods.  Docstrings are not\
    \ necessary for non-public methods, but\nyou should have a comment that describes\
    \ what the method does.  This\ncomment should appear after the def line.\nPEP\
    \ 257 describes good docstring conventions.  Note that most\nimportantly, the\
    \ \"\"\" that ends a multiline docstring should be\non a line by itself:\"\"\"\
    Return a foobang\n\nOptional plotz says to frobnicate the bizbaz first.\n\"\"\"\
    \n\n\n\nFor one liner docstrings, please keep the closing \"\"\" on\nthe same\
    \ line:\"\"\"Return an ex-parrot.\"\"\"\n\n\n\n Write docstrings for all public\
    \ modules, functions, classes, and\nmethods.  Docstrings are not necessary for\
    \ non-public methods, but\nyou should have a comment that describes what the method\
    \ does.  This\ncomment should appear after the def line. PEP 257 describes good\
    \ docstring conventions.  Note that most\nimportantly, the \"\"\" that ends a\
    \ multiline docstring should be\non a line by itself:\"\"\"Return a foobang\n\n\
    Optional plotz says to frobnicate the bizbaz first.\n\"\"\"\n\n\n PEP 257 For\
    \ one liner docstrings, please keep the closing \"\"\" on\nthe same line:\"\"\"\
    Return an ex-parrot.\"\"\"\n\n\n Naming Conventions Naming Conventions The naming\
    \ conventions of Python’s library are a bit of a mess, so\nwe’ll never get this\
    \ completely consistent – nevertheless, here are\nthe currently recommended naming\
    \ standards.  New modules and packages\n(including third party frameworks) should\
    \ be written to these\nstandards, but where an existing library has a different\
    \ style,\ninternal consistency is preferred. Overriding Principle Overriding Principle\
    \ Names that are visible to the user as public parts of the API should\nfollow\
    \ conventions that reflect usage rather than implementation. Descriptive: Naming\
    \ Styles Descriptive: Naming Styles There are a lot of different naming styles.\
    \  It helps to be able to\nrecognize what naming style is being used, independently\
    \ from what\nthey are used for. The following naming styles are commonly distinguished:\
    \ \nb (single lowercase letter)\nB (single uppercase letter)\nlowercase\nlower_case_with_underscores\n\
    UPPERCASE\nUPPER_CASE_WITH_UNDERSCORES\nCapitalizedWords (or CapWords, or CamelCase\
    \ – so named because\nof the bumpy look of its letters [4]).  This is also sometimes\
    \ known\nas StudlyCaps.Note: When using acronyms in CapWords, capitalize all the\n\
    letters of the acronym.  Thus HTTPServerError is better than\nHttpServerError.\n\
    \nmixedCase (differs from CapitalizedWords by initial lowercase\ncharacter!)\n\
    Capitalized_Words_With_Underscores (ugly!)\n b (single lowercase letter) B (single\
    \ uppercase letter) lowercase lower_case_with_underscores UPPERCASE UPPER_CASE_WITH_UNDERSCORES\
    \ CapitalizedWords (or CapWords, or CamelCase – so named because\nof the bumpy\
    \ look of its letters [4]).  This is also sometimes known\nas StudlyCaps.Note:\
    \ When using acronyms in CapWords, capitalize all the\nletters of the acronym.\
    \  Thus HTTPServerError is better than\nHttpServerError.\n [4] Note: When using\
    \ acronyms in CapWords, capitalize all the\nletters of the acronym.  Thus HTTPServerError\
    \ is better than\nHttpServerError. mixedCase (differs from CapitalizedWords by\
    \ initial lowercase\ncharacter!) Capitalized_Words_With_Underscores (ugly!) There’\
    s also the style of using a short unique prefix to group related\nnames together.\
    \  This is not used much in Python, but it is mentioned\nfor completeness.  For\
    \ example, the os.stat() function returns a\ntuple whose items traditionally have\
    \ names like st_mode,\nst_size, st_mtime and so on.  (This is done to emphasize\
    \ the\ncorrespondence with the fields of the POSIX system call struct, which\n\
    helps programmers familiar with that.) The X11 library uses a leading X for all\
    \ its public functions.  In\nPython, this style is generally deemed unnecessary\
    \ because attribute\nand method names are prefixed with an object, and function\
    \ names are\nprefixed with a module name. In addition, the following special forms\
    \ using leading or trailing\nunderscores are recognized (these can generally be\
    \ combined with any\ncase convention): \n_single_leading_underscore: weak “internal\
    \ use” indicator.\nE.g. from M import * does not import objects whose names start\n\
    with an underscore.\nsingle_trailing_underscore_: used by convention to avoid\n\
    conflicts with Python keyword, e.g.tkinter.Toplevel(master, class_='ClassName')\n\
    \n\n\n__double_leading_underscore: when naming a class attribute,\ninvokes name\
    \ mangling (inside class FooBar, __boo becomes\n_FooBar__boo; see below).\n__double_leading_and_trailing_underscore__:\
    \ “magic” objects or\nattributes that live in user-controlled namespaces.\nE.g.\
    \ __init__, __import__ or __file__.  Never invent\nsuch names; only use them as\
    \ documented.\n _single_leading_underscore: weak “internal use” indicator.\nE.g.\
    \ from M import * does not import objects whose names start\nwith an underscore.\
    \ single_trailing_underscore_: used by convention to avoid\nconflicts with Python\
    \ keyword, e.g.tkinter.Toplevel(master, class_='ClassName')\n\n\n __double_leading_underscore:\
    \ when naming a class attribute,\ninvokes name mangling (inside class FooBar,\
    \ __boo becomes\n_FooBar__boo; see below). __double_leading_and_trailing_underscore__:\
    \ “magic” objects or\nattributes that live in user-controlled namespaces.\nE.g.\
    \ __init__, __import__ or __file__.  Never invent\nsuch names; only use them as\
    \ documented. Prescriptive: Naming Conventions Prescriptive: Naming Conventions\
    \ Names to Avoid Names to Avoid Never use the characters ‘l’ (lowercase letter\
    \ el), ‘O’ (uppercase\nletter oh), or ‘I’ (uppercase letter eye) as single character\
    \ variable\nnames. In some fonts, these characters are indistinguishable from\
    \ the\nnumerals one and zero.  When tempted to use ‘l’, use ‘L’ instead. ASCII\
    \ Compatibility ASCII Compatibility Identifiers used in the standard library must\
    \ be ASCII compatible\nas described in the\npolicy section\nof PEP 3131. policy\
    \ section PEP 3131 Package and Module Names Package and Module Names Modules should\
    \ have short, all-lowercase names.  Underscores can be\nused in the module name\
    \ if it improves readability.  Python packages\nshould also have short, all-lowercase\
    \ names, although the use of\nunderscores is discouraged. When an extension module\
    \ written in C or C++ has an accompanying\nPython module that provides a higher\
    \ level (e.g. more object oriented)\ninterface, the C/C++ module has a leading\
    \ underscore\n(e.g. _socket). Class Names Class Names Class names should normally\
    \ use the CapWords convention. The naming convention for functions may be used\
    \ instead in cases where\nthe interface is documented and used primarily as a\
    \ callable. Note that there is a separate convention for builtin names: most builtin\n\
    names are single words (or two words run together), with the CapWords\nconvention\
    \ used only for exception names and builtin constants. Type Variable Names Type\
    \ Variable Names Names of type variables introduced in PEP 484 should normally\
    \ use CapWords\npreferring short names: T, AnyStr, Num. It is recommended to add\n\
    suffixes _co or _contra to the variables used to declare covariant\nor contravariant\
    \ behavior correspondingly: PEP 484 Exception Names Exception Names Because exceptions\
    \ should be classes, the class naming convention\napplies here.  However, you\
    \ should use the suffix “Error” on your\nexception names (if the exception actually\
    \ is an error). Global Variable Names Global Variable Names (Let’s hope that these\
    \ variables are meant for use inside one module\nonly.)  The conventions are about\
    \ the same as those for functions. Modules that are designed for use via from\
    \ M import * should use\nthe __all__ mechanism to prevent exporting globals, or\
    \ use the\nolder convention of prefixing such globals with an underscore (which\n\
    you might want to do to indicate these globals are “module\nnon-public”). Function\
    \ and Variable Names Function and Variable Names Function names should be lowercase,\
    \ with words separated by\nunderscores as necessary to improve readability. Variable\
    \ names follow the same convention as function names. mixedCase is allowed only\
    \ in contexts where that’s already the\nprevailing style (e.g. threading.py),\
    \ to retain backwards\ncompatibility. Function and Method Arguments Function and\
    \ Method Arguments Always use self for the first argument to instance methods.\
    \ Always use cls for the first argument to class methods. If a function argument’\
    s name clashes with a reserved keyword, it is\ngenerally better to append a single\
    \ trailing underscore rather than\nuse an abbreviation or spelling corruption.\
    \  Thus class_ is better\nthan clss.  (Perhaps better is to avoid such clashes\
    \ by using a\nsynonym.) Method Names and Instance Variables Method Names and Instance\
    \ Variables Use the function naming rules: lowercase with words separated by\n\
    underscores as necessary to improve readability. Use one leading underscore only\
    \ for non-public methods and instance\nvariables. To avoid name clashes with subclasses,\
    \ use two leading underscores to\ninvoke Python’s name mangling rules. Python\
    \ mangles these names with the class name: if class Foo has an\nattribute named\
    \ __a, it cannot be accessed by Foo.__a.  (An\ninsistent user could still gain\
    \ access by calling Foo._Foo__a.)\nGenerally, double leading underscores should\
    \ be used only to avoid\nname conflicts with attributes in classes designed to\
    \ be subclassed. Note: there is some controversy about the use of __names (see\
    \ below). Constants Constants Constants are usually defined on a module level\
    \ and written in all\ncapital letters with underscores separating words.  Examples\
    \ include\nMAX_OVERFLOW and TOTAL. Designing for Inheritance Designing for Inheritance\
    \ Always decide whether a class’s methods and instance variables\n(collectively:\
    \ “attributes”) should be public or non-public.  If in\ndoubt, choose non-public;\
    \ it’s easier to make it public later than to\nmake a public attribute non-public.\
    \ Public attributes are those that you expect unrelated clients of your\nclass\
    \ to use, with your commitment to avoid backwards incompatible\nchanges.  Non-public\
    \ attributes are those that are not intended to be\nused by third parties; you\
    \ make no guarantees that non-public\nattributes won’t change or even be removed.\
    \ We don’t use the term “private” here, since no attribute is really\nprivate\
    \ in Python (without a generally unnecessary amount of work). Another category\
    \ of attributes are those that are part of the\n“subclass API” (often called “\
    protected” in other languages).  Some\nclasses are designed to be inherited from,\
    \ either to extend or modify\naspects of the class’s behavior.  When designing\
    \ such a class, take\ncare to make explicit decisions about which attributes are\
    \ public,\nwhich are part of the subclass API, and which are truly only to be\n\
    used by your base class. With this in mind, here are the Pythonic guidelines:\
    \ \nPublic attributes should have no leading underscores.\nIf your public attribute\
    \ name collides with a reserved keyword,\nappend a single trailing underscore\
    \ to your attribute name.  This is\npreferable to an abbreviation or corrupted\
    \ spelling.  (However,\nnotwithstanding this rule, ‘cls’ is the preferred spelling\
    \ for any\nvariable or argument which is known to be a class, especially the\n\
    first argument to a class method.)Note 1: See the argument name recommendation\
    \ above for class methods.\n\nFor simple public data attributes, it is best to\
    \ expose just the\nattribute name, without complicated accessor/mutator methods.\
    \  Keep\nin mind that Python provides an easy path to future enhancement,\nshould\
    \ you find that a simple data attribute needs to grow\nfunctional behavior.  In\
    \ that case, use properties to hide\nfunctional implementation behind simple data\
    \ attribute access\nsyntax.Note 1: Try to keep the functional behavior side-effect\
    \ free,\nalthough side-effects such as caching are generally fine.\nNote 2: Avoid\
    \ using properties for computationally expensive\noperations; the attribute notation\
    \ makes the caller believe that\naccess is (relatively) cheap.\n\nIf your class\
    \ is intended to be subclassed, and you have attributes\nthat you do not want\
    \ subclasses to use, consider naming them with\ndouble leading underscores and\
    \ no trailing underscores.  This\ninvokes Python’s name mangling algorithm, where\
    \ the name of the\nclass is mangled into the attribute name.  This helps avoid\n\
    attribute name collisions should subclasses inadvertently contain\nattributes\
    \ with the same name.Note 1: Note that only the simple class name is used in the\
    \ mangled\nname, so if a subclass chooses both the same class name and attribute\n\
    name, you can still get name collisions.\nNote 2: Name mangling can make certain\
    \ uses, such as debugging and\n__getattr__(), less convenient.  However the name\
    \ mangling\nalgorithm is well documented and easy to perform manually.\nNote 3:\
    \ Not everyone likes name mangling.  Try to balance the\nneed to avoid accidental\
    \ name clashes with potential use by\nadvanced callers.\n\n Public attributes\
    \ should have no leading underscores. If your public attribute name collides with\
    \ a reserved keyword,\nappend a single trailing underscore to your attribute name.\
    \  This is\npreferable to an abbreviation or corrupted spelling.  (However,\n\
    notwithstanding this rule, ‘cls’ is the preferred spelling for any\nvariable or\
    \ argument which is known to be a class, especially the\nfirst argument to a class\
    \ method.)Note 1: See the argument name recommendation above for class methods.\n\
    \ Note 1: See the argument name recommendation above for class methods. For simple\
    \ public data attributes, it is best to expose just the\nattribute name, without\
    \ complicated accessor/mutator methods.  Keep\nin mind that Python provides an\
    \ easy path to future enhancement,\nshould you find that a simple data attribute\
    \ needs to grow\nfunctional behavior.  In that case, use properties to hide\n\
    functional implementation behind simple data attribute access\nsyntax.Note 1:\
    \ Try to keep the functional behavior side-effect free,\nalthough side-effects\
    \ such as caching are generally fine.\nNote 2: Avoid using properties for computationally\
    \ expensive\noperations; the attribute notation makes the caller believe that\n\
    access is (relatively) cheap.\n Note 1: Try to keep the functional behavior side-effect\
    \ free,\nalthough side-effects such as caching are generally fine. Note 2: Avoid\
    \ using properties for computationally expensive\noperations; the attribute notation\
    \ makes the caller believe that\naccess is (relatively) cheap. If your class is\
    \ intended to be subclassed, and you have attributes\nthat you do not want subclasses\
    \ to use, consider naming them with\ndouble leading underscores and no trailing\
    \ underscores.  This\ninvokes Python’s name mangling algorithm, where the name\
    \ of the\nclass is mangled into the attribute name.  This helps avoid\nattribute\
    \ name collisions should subclasses inadvertently contain\nattributes with the\
    \ same name.Note 1: Note that only the simple class name is used in the mangled\n\
    name, so if a subclass chooses both the same class name and attribute\nname, you\
    \ can still get name collisions.\nNote 2: Name mangling can make certain uses,\
    \ such as debugging and\n__getattr__(), less convenient.  However the name mangling\n\
    algorithm is well documented and easy to perform manually.\nNote 3: Not everyone\
    \ likes name mangling.  Try to balance the\nneed to avoid accidental name clashes\
    \ with potential use by\nadvanced callers.\n Note 1: Note that only the simple\
    \ class name is used in the mangled\nname, so if a subclass chooses both the same\
    \ class name and attribute\nname, you can still get name collisions. Note 2: Name\
    \ mangling can make certain uses, such as debugging and\n__getattr__(), less convenient.\
    \  However the name mangling\nalgorithm is well documented and easy to perform\
    \ manually. Note 3: Not everyone likes name mangling.  Try to balance the\nneed\
    \ to avoid accidental name clashes with potential use by\nadvanced callers. Public\
    \ and Internal Interfaces Public and Internal Interfaces Any backwards compatibility\
    \ guarantees apply only to public interfaces.\nAccordingly, it is important that\
    \ users be able to clearly distinguish\nbetween public and internal interfaces.\
    \ Documented interfaces are considered public, unless the documentation\nexplicitly\
    \ declares them to be provisional or internal interfaces exempt\nfrom the usual\
    \ backwards compatibility guarantees. All undocumented\ninterfaces should be assumed\
    \ to be internal. To better support introspection, modules should explicitly declare\
    \ the\nnames in their public API using the __all__ attribute. Setting\n__all__\
    \ to an empty list indicates that the module has no public API. Even with __all__\
    \ set appropriately, internal interfaces (packages,\nmodules, classes, functions,\
    \ attributes or other names) should still be\nprefixed with a single leading underscore.\
    \ An interface is also considered internal if any containing namespace\n(package,\
    \ module or class) is considered internal. Imported names should always be considered\
    \ an implementation detail.\nOther modules must not rely on indirect access to\
    \ such imported names\nunless they are an explicitly documented part of the containing\
    \ module’s\nAPI, such as os.path or a package’s __init__ module that exposes\n\
    functionality from submodules. Programming Recommendations Programming Recommendations\
    \ \nCode should be written in a way that does not disadvantage other\nimplementations\
    \ of Python (PyPy, Jython, IronPython, Cython, Psyco,\nand such).For example,\
    \ do not rely on CPython’s efficient implementation of\nin-place string concatenation\
    \ for statements in the form a += b\nor a = a + b.  This optimization is fragile\
    \ even in CPython (it\nonly works for some types) and isn’t present at all in\
    \ implementations\nthat don’t use refcounting.  In performance sensitive parts\
    \ of the\nlibrary, the ''.join() form should be used instead.  This will\nensure\
    \ that concatenation occurs in linear time across various\nimplementations.\n\n\
    Comparisons to singletons like None should always be done with\nis or is not,\
    \ never the equality operators.Also, beware of writing if x when you really mean\
    \ if x is not\nNone – e.g. when testing whether a variable or argument that\n\
    defaults to None was set to some other value.  The other value might\nhave a type\
    \ (such as a container) that could be false in a boolean\ncontext!\n\nUse is not\
    \ operator rather than not ... is.  While both\nexpressions are functionally identical,\
    \ the former is more readable\nand preferred:# Correct:\nif foo is not None:\n\
    \n\n# Wrong:\nif not foo is None:\n\n\n\nWhen implementing ordering operations\
    \ with rich comparisons, it is\nbest to implement all six operations (__eq__,\
    \ __ne__,\n__lt__, __le__, __gt__, __ge__) rather than relying\non other code\
    \ to only exercise a particular comparison.To minimize the effort involved, the\
    \ functools.total_ordering()\ndecorator provides a tool to generate missing comparison\
    \ methods.\nPEP 207 indicates that reflexivity rules are assumed by Python.\n\
    Thus, the interpreter may swap y > x with x < y, y >= x\nwith x <= y, and may\
    \ swap the arguments of x == y and x !=\ny.  The sort() and min() operations are\
    \ guaranteed to use\nthe < operator and the max() function uses the >\noperator.\
    \  However, it is best to implement all six operations so\nthat confusion doesn’\
    t arise in other contexts.\n\nAlways use a def statement instead of an assignment\
    \ statement that binds\na lambda expression directly to an identifier:# Correct:\n\
    def f(x): return 2*x\n\n\n# Wrong:\nf = lambda x: 2*x\n\n\nThe first form means\
    \ that the name of the resulting function object is\nspecifically ‘f’ instead\
    \ of the generic ‘<lambda>’. This is more\nuseful for tracebacks and string representations\
    \ in general. The use\nof the assignment statement eliminates the sole benefit\
    \ a lambda\nexpression can offer over an explicit def statement (i.e. that it\
    \ can\nbe embedded inside a larger expression)\n\nDerive exceptions from Exception\
    \ rather than BaseException.\nDirect inheritance from BaseException is reserved\
    \ for exceptions\nwhere catching them is almost always the wrong thing to do.Design\
    \ exception hierarchies based on the distinctions that code\ncatching the exceptions\
    \ is likely to need, rather than the locations\nwhere the exceptions are raised.\
    \ Aim to answer the question\n“What went wrong?” programmatically, rather than\
    \ only stating that\n“A problem occurred” (see PEP 3151 for an example of this\
    \ lesson being\nlearned for the builtin exception hierarchy)\nClass naming conventions\
    \ apply here, although you should add the\nsuffix “Error” to your exception classes\
    \ if the exception is an\nerror.  Non-error exceptions that are used for non-local\
    \ flow control\nor other forms of signaling need no special suffix.\n\nUse exception\
    \ chaining appropriately. raise X from Y\nshould be used to indicate explicit\
    \ replacement without losing the\noriginal traceback.When deliberately replacing\
    \ an inner exception (using raise X from\nNone), ensure that relevant details\
    \ are transferred to the new\nexception (such as preserving the attribute name\
    \ when converting\nKeyError to AttributeError, or embedding the text of the original\n\
    exception in the new exception message).\n\nWhen catching exceptions, mention\
    \ specific exceptions whenever\npossible instead of using a bare except: clause:try:\n\
    \    import platform_specific_module\nexcept ImportError:\n    platform_specific_module\
    \ = None\n\n\nA bare except: clause will catch SystemExit and\nKeyboardInterrupt\
    \ exceptions, making it harder to interrupt a\nprogram with Control-C, and can\
    \ disguise other problems.  If you\nwant to catch all exceptions that signal program\
    \ errors, use\nexcept Exception: (bare except is equivalent to except\nBaseException:).\n\
    A good rule of thumb is to limit use of bare ‘except’ clauses to two\ncases:\n\
    \nIf the exception handler will be printing out or logging the\ntraceback; at\
    \ least the user will be aware that an error has\noccurred.\nIf the code needs\
    \ to do some cleanup work, but then lets the\nexception propagate upwards with\
    \ raise.  try...finally\ncan be a better way to handle this case.\n\n\nWhen catching\
    \ operating system errors, prefer the explicit exception\nhierarchy introduced\
    \ in Python 3.3 over introspection of errno\nvalues.\nAdditionally, for all try/except\
    \ clauses, limit the try clause\nto the absolute minimum amount of code necessary.\
    \  Again, this\navoids masking bugs:# Correct:\ntry:\n    value = collection[key]\n\
    except KeyError:\n    return key_not_found(key)\nelse:\n    return handle_value(value)\n\
    \n\n# Wrong:\ntry:\n    # Too broad!\n    return handle_value(collection[key])\n\
    except KeyError:\n    # Will also catch KeyError raised by handle_value()\n  \
    \  return key_not_found(key)\n\n\n\nWhen a resource is local to a particular section\
    \ of code, use a\nwith statement to ensure it is cleaned up promptly and reliably\n\
    after use. A try/finally statement is also acceptable.\nContext managers should\
    \ be invoked through separate functions or methods\nwhenever they do something\
    \ other than acquire and release resources:# Correct:\nwith conn.begin_transaction():\n\
    \    do_stuff_in_transaction(conn)\n\n\n# Wrong:\nwith conn:\n    do_stuff_in_transaction(conn)\n\
    \n\nThe latter example doesn’t provide any information to indicate that\nthe __enter__\
    \ and __exit__ methods are doing something other\nthan closing the connection\
    \ after a transaction.  Being explicit is\nimportant in this case.\n\nBe consistent\
    \ in return statements.  Either all return statements in\na function should return\
    \ an expression, or none of them should.  If\nany return statement returns an\
    \ expression, any return statements\nwhere no value is returned should explicitly\
    \ state this as return\nNone, and an explicit return statement should be present\
    \ at the\nend of the function (if reachable):# Correct:\n\ndef foo(x):\n    if\
    \ x >= 0:\n        return math.sqrt(x)\n    else:\n        return None\n\ndef\
    \ bar(x):\n    if x < 0:\n        return None\n    return math.sqrt(x)\n\n\n#\
    \ Wrong:\n\ndef foo(x):\n    if x >= 0:\n        return math.sqrt(x)\n\ndef bar(x):\n\
    \    if x < 0:\n        return\n    return math.sqrt(x)\n\n\n\nUse ''.startswith()\
    \ and ''.endswith() instead of string\nslicing to check for prefixes or suffixes.startswith()\
    \ and endswith() are cleaner and less error prone:\n# Correct:\nif foo.startswith('bar'):\n\
    \n\n# Wrong:\nif foo[:3] == 'bar':\n\n\n\nObject type comparisons should always\
    \ use isinstance() instead of\ncomparing types directly:# Correct:\nif isinstance(obj,\
    \ int):\n\n\n# Wrong:\nif type(obj) is type(1):\n\n\n\nFor sequences, (strings,\
    \ lists, tuples), use the fact that empty\nsequences are false:# Correct:\nif\
    \ not seq:\nif seq:\n\n\n# Wrong:\nif len(seq):\nif not len(seq):\n\n\n\nDon’\
    t write string literals that rely on significant trailing\nwhitespace.  Such trailing\
    \ whitespace is visually indistinguishable\nand some editors (or more recently,\
    \ reindent.py) will trim them.\nDon’t compare boolean values to True or False\
    \ using ==:# Correct:\nif greeting:\n\n\n# Wrong:\nif greeting == True:\n\n\n\
    Worse:\n# Wrong:\nif greeting is True:\n\n\n\nUse of the flow control statements\
    \ return/break/continue\nwithin the finally suite of a try...finally, where the\
    \ flow control\nstatement would jump outside the finally suite, is discouraged.\
    \  This\nis because such statements will implicitly cancel any active exception\n\
    that is propagating through the finally suite:# Wrong:\ndef foo():\n    try:\n\
    \        1 / 0\n    finally:\n        return 42\n\n\n\n Code should be written\
    \ in a way that does not disadvantage other\nimplementations of Python (PyPy,\
    \ Jython, IronPython, Cython, Psyco,\nand such).For example, do not rely on CPython’\
    s efficient implementation of\nin-place string concatenation for statements in\
    \ the form a += b\nor a = a + b.  This optimization is fragile even in CPython\
    \ (it\nonly works for some types) and isn’t present at all in implementations\n\
    that don’t use refcounting.  In performance sensitive parts of the\nlibrary, the\
    \ ''.join() form should be used instead.  This will\nensure that concatenation\
    \ occurs in linear time across various\nimplementations.\n For example, do not\
    \ rely on CPython’s efficient implementation of\nin-place string concatenation\
    \ for statements in the form a += b\nor a = a + b.  This optimization is fragile\
    \ even in CPython (it\nonly works for some types) and isn’t present at all in\
    \ implementations\nthat don’t use refcounting.  In performance sensitive parts\
    \ of the\nlibrary, the ''.join() form should be used instead.  This will\nensure\
    \ that concatenation occurs in linear time across various\nimplementations. Comparisons\
    \ to singletons like None should always be done with\nis or is not, never the\
    \ equality operators.Also, beware of writing if x when you really mean if x is\
    \ not\nNone – e.g. when testing whether a variable or argument that\ndefaults\
    \ to None was set to some other value.  The other value might\nhave a type (such\
    \ as a container) that could be false in a boolean\ncontext!\n Also, beware of\
    \ writing if x when you really mean if x is not\nNone – e.g. when testing whether\
    \ a variable or argument that\ndefaults to None was set to some other value. \
    \ The other value might\nhave a type (such as a container) that could be false\
    \ in a boolean\ncontext! Use is not operator rather than not ... is.  While both\n\
    expressions are functionally identical, the former is more readable\nand preferred:#\
    \ Correct:\nif foo is not None:\n\n\n# Wrong:\nif not foo is None:\n\n\n When\
    \ implementing ordering operations with rich comparisons, it is\nbest to implement\
    \ all six operations (__eq__, __ne__,\n__lt__, __le__, __gt__, __ge__) rather\
    \ than relying\non other code to only exercise a particular comparison.To minimize\
    \ the effort involved, the functools.total_ordering()\ndecorator provides a tool\
    \ to generate missing comparison methods.\nPEP 207 indicates that reflexivity\
    \ rules are assumed by Python.\nThus, the interpreter may swap y > x with x <\
    \ y, y >= x\nwith x <= y, and may swap the arguments of x == y and x !=\ny.  The\
    \ sort() and min() operations are guaranteed to use\nthe < operator and the max()\
    \ function uses the >\noperator.  However, it is best to implement all six operations\
    \ so\nthat confusion doesn’t arise in other contexts.\n To minimize the effort\
    \ involved, the functools.total_ordering()\ndecorator provides a tool to generate\
    \ missing comparison methods. PEP 207 indicates that reflexivity rules are assumed\
    \ by Python.\nThus, the interpreter may swap y > x with x < y, y >= x\nwith x\
    \ <= y, and may swap the arguments of x == y and x !=\ny.  The sort() and min()\
    \ operations are guaranteed to use\nthe < operator and the max() function uses\
    \ the >\noperator.  However, it is best to implement all six operations so\nthat\
    \ confusion doesn’t arise in other contexts. PEP 207 Always use a def statement\
    \ instead of an assignment statement that binds\na lambda expression directly\
    \ to an identifier:# Correct:\ndef f(x): return 2*x\n\n\n# Wrong:\nf = lambda\
    \ x: 2*x\n\n\nThe first form means that the name of the resulting function object\
    \ is\nspecifically ‘f’ instead of the generic ‘<lambda>’. This is more\nuseful\
    \ for tracebacks and string representations in general. The use\nof the assignment\
    \ statement eliminates the sole benefit a lambda\nexpression can offer over an\
    \ explicit def statement (i.e. that it can\nbe embedded inside a larger expression)\n\
    \ The first form means that the name of the resulting function object is\nspecifically\
    \ ‘f’ instead of the generic ‘<lambda>’. This is more\nuseful for tracebacks and\
    \ string representations in general. The use\nof the assignment statement eliminates\
    \ the sole benefit a lambda\nexpression can offer over an explicit def statement\
    \ (i.e. that it can\nbe embedded inside a larger expression) Derive exceptions\
    \ from Exception rather than BaseException.\nDirect inheritance from BaseException\
    \ is reserved for exceptions\nwhere catching them is almost always the wrong thing\
    \ to do.Design exception hierarchies based on the distinctions that code\ncatching\
    \ the exceptions is likely to need, rather than the locations\nwhere the exceptions\
    \ are raised. Aim to answer the question\n“What went wrong?” programmatically,\
    \ rather than only stating that\n“A problem occurred” (see PEP 3151 for an example\
    \ of this lesson being\nlearned for the builtin exception hierarchy)\nClass naming\
    \ conventions apply here, although you should add the\nsuffix “Error” to your\
    \ exception classes if the exception is an\nerror.  Non-error exceptions that\
    \ are used for non-local flow control\nor other forms of signaling need no special\
    \ suffix.\n Design exception hierarchies based on the distinctions that code\n\
    catching the exceptions is likely to need, rather than the locations\nwhere the\
    \ exceptions are raised. Aim to answer the question\n“What went wrong?” programmatically,\
    \ rather than only stating that\n“A problem occurred” (see PEP 3151 for an example\
    \ of this lesson being\nlearned for the builtin exception hierarchy) PEP 3151\
    \ Class naming conventions apply here, although you should add the\nsuffix “Error”\
    \ to your exception classes if the exception is an\nerror.  Non-error exceptions\
    \ that are used for non-local flow control\nor other forms of signaling need no\
    \ special suffix. Use exception chaining appropriately. raise X from Y\nshould\
    \ be used to indicate explicit replacement without losing the\noriginal traceback.When\
    \ deliberately replacing an inner exception (using raise X from\nNone), ensure\
    \ that relevant details are transferred to the new\nexception (such as preserving\
    \ the attribute name when converting\nKeyError to AttributeError, or embedding\
    \ the text of the original\nexception in the new exception message).\n When deliberately\
    \ replacing an inner exception (using raise X from\nNone), ensure that relevant\
    \ details are transferred to the new\nexception (such as preserving the attribute\
    \ name when converting\nKeyError to AttributeError, or embedding the text of the\
    \ original\nexception in the new exception message). When catching exceptions,\
    \ mention specific exceptions whenever\npossible instead of using a bare except:\
    \ clause:try:\n    import platform_specific_module\nexcept ImportError:\n    platform_specific_module\
    \ = None\n\n\nA bare except: clause will catch SystemExit and\nKeyboardInterrupt\
    \ exceptions, making it harder to interrupt a\nprogram with Control-C, and can\
    \ disguise other problems.  If you\nwant to catch all exceptions that signal program\
    \ errors, use\nexcept Exception: (bare except is equivalent to except\nBaseException:).\n\
    A good rule of thumb is to limit use of bare ‘except’ clauses to two\ncases:\n\
    \nIf the exception handler will be printing out or logging the\ntraceback; at\
    \ least the user will be aware that an error has\noccurred.\nIf the code needs\
    \ to do some cleanup work, but then lets the\nexception propagate upwards with\
    \ raise.  try...finally\ncan be a better way to handle this case.\n\n A bare except:\
    \ clause will catch SystemExit and\nKeyboardInterrupt exceptions, making it harder\
    \ to interrupt a\nprogram with Control-C, and can disguise other problems.  If\
    \ you\nwant to catch all exceptions that signal program errors, use\nexcept Exception:\
    \ (bare except is equivalent to except\nBaseException:). A good rule of thumb\
    \ is to limit use of bare ‘except’ clauses to two\ncases: \nIf the exception handler\
    \ will be printing out or logging the\ntraceback; at least the user will be aware\
    \ that an error has\noccurred.\nIf the code needs to do some cleanup work, but\
    \ then lets the\nexception propagate upwards with raise.  try...finally\ncan be\
    \ a better way to handle this case.\n If the exception handler will be printing\
    \ out or logging the\ntraceback; at least the user will be aware that an error\
    \ has\noccurred. If the code needs to do some cleanup work, but then lets the\n\
    exception propagate upwards with raise.  try...finally\ncan be a better way to\
    \ handle this case. When catching operating system errors, prefer the explicit\
    \ exception\nhierarchy introduced in Python 3.3 over introspection of errno\n\
    values. Additionally, for all try/except clauses, limit the try clause\nto the\
    \ absolute minimum amount of code necessary.  Again, this\navoids masking bugs:#\
    \ Correct:\ntry:\n    value = collection[key]\nexcept KeyError:\n    return key_not_found(key)\n\
    else:\n    return handle_value(value)\n\n\n# Wrong:\ntry:\n    # Too broad!\n\
    \    return handle_value(collection[key])\nexcept KeyError:\n    # Will also catch\
    \ KeyError raised by handle_value()\n    return key_not_found(key)\n\n\n When\
    \ a resource is local to a particular section of code, use a\nwith statement to\
    \ ensure it is cleaned up promptly and reliably\nafter use. A try/finally statement\
    \ is also acceptable. Context managers should be invoked through separate functions\
    \ or methods\nwhenever they do something other than acquire and release resources:#\
    \ Correct:\nwith conn.begin_transaction():\n    do_stuff_in_transaction(conn)\n\
    \n\n# Wrong:\nwith conn:\n    do_stuff_in_transaction(conn)\n\n\nThe latter example\
    \ doesn’t provide any information to indicate that\nthe __enter__ and __exit__\
    \ methods are doing something other\nthan closing the connection after a transaction.\
    \  Being explicit is\nimportant in this case.\n The latter example doesn’t provide\
    \ any information to indicate that\nthe __enter__ and __exit__ methods are doing\
    \ something other\nthan closing the connection after a transaction.  Being explicit\
    \ is\nimportant in this case. Be consistent in return statements.  Either all\
    \ return statements in\na function should return an expression, or none of them\
    \ should.  If\nany return statement returns an expression, any return statements\n\
    where no value is returned should explicitly state this as return\nNone, and an\
    \ explicit return statement should be present at the\nend of the function (if\
    \ reachable):# Correct:\n\ndef foo(x):\n    if x >= 0:\n        return math.sqrt(x)\n\
    \    else:\n        return None\n\ndef bar(x):\n    if x < 0:\n        return\
    \ None\n    return math.sqrt(x)\n\n\n# Wrong:\n\ndef foo(x):\n    if x >= 0:\n\
    \        return math.sqrt(x)\n\ndef bar(x):\n    if x < 0:\n        return\n \
    \   return math.sqrt(x)\n\n\n Use ''.startswith() and ''.endswith() instead of\
    \ string\nslicing to check for prefixes or suffixes.startswith() and endswith()\
    \ are cleaner and less error prone:\n# Correct:\nif foo.startswith('bar'):\n\n\
    \n# Wrong:\nif foo[:3] == 'bar':\n\n\n startswith() and endswith() are cleaner\
    \ and less error prone: Object type comparisons should always use isinstance()\
    \ instead of\ncomparing types directly:# Correct:\nif isinstance(obj, int):\n\n\
    \n# Wrong:\nif type(obj) is type(1):\n\n\n For sequences, (strings, lists, tuples),\
    \ use the fact that empty\nsequences are false:# Correct:\nif not seq:\nif seq:\n\
    \n\n# Wrong:\nif len(seq):\nif not len(seq):\n\n\n Don’t write string literals\
    \ that rely on significant trailing\nwhitespace.  Such trailing whitespace is\
    \ visually indistinguishable\nand some editors (or more recently, reindent.py)\
    \ will trim them. Don’t compare boolean values to True or False using ==:# Correct:\n\
    if greeting:\n\n\n# Wrong:\nif greeting == True:\n\n\nWorse:\n# Wrong:\nif greeting\
    \ is True:\n\n\n Worse: Use of the flow control statements return/break/continue\n\
    within the finally suite of a try...finally, where the flow control\nstatement\
    \ would jump outside the finally suite, is discouraged.  This\nis because such\
    \ statements will implicitly cancel any active exception\nthat is propagating\
    \ through the finally suite:# Wrong:\ndef foo():\n    try:\n        1 / 0\n  \
    \  finally:\n        return 42\n\n\n Function Annotations Function Annotations\
    \ With the acceptance of PEP 484, the style rules for function\nannotations have\
    \ changed. PEP 484 \nFunction annotations should use PEP 484 syntax (there are\
    \ some\nformatting recommendations for annotations in the previous section).\n\
    The experimentation with annotation styles that was recommended\npreviously in\
    \ this PEP is no longer encouraged.\nHowever, outside the stdlib, experiments\
    \ within the rules of PEP 484\nare now encouraged.  For example, marking up a\
    \ large third party\nlibrary or application with PEP 484 style type annotations,\n\
    reviewing how easy it was to add those annotations, and observing\nwhether their\
    \ presence increases code understandability.\nThe Python standard library should\
    \ be conservative in adopting such\nannotations, but their use is allowed for\
    \ new code and for big\nrefactorings.\nFor code that wants to make a different\
    \ use of function annotations\nit is recommended to put a comment of the form:#\
    \ type: ignore\n\n\nnear the top of the file; this tells type checkers to ignore\
    \ all\nannotations.  (More fine-grained ways of disabling complaints from\ntype\
    \ checkers can be found in PEP 484.)\n\nLike linters, type checkers are optional,\
    \ separate tools.  Python\ninterpreters by default should not issue any messages\
    \ due to type\nchecking and should not alter their behavior based on annotations.\n\
    Users who don’t want to use type checkers are free to ignore them.\nHowever, it\
    \ is expected that users of third party library packages\nmay want to run type\
    \ checkers over those packages.  For this purpose\nPEP 484 recommends the use\
    \ of stub files: .pyi files that are read\nby the type checker in preference of\
    \ the corresponding .py files.\nStub files can be distributed with a library,\
    \ or separately (with\nthe library author’s permission) through the typeshed repo\
    \ [5].\n Function annotations should use PEP 484 syntax (there are some\nformatting\
    \ recommendations for annotations in the previous section). PEP 484 The experimentation\
    \ with annotation styles that was recommended\npreviously in this PEP is no longer\
    \ encouraged. However, outside the stdlib, experiments within the rules of PEP\
    \ 484\nare now encouraged.  For example, marking up a large third party\nlibrary\
    \ or application with PEP 484 style type annotations,\nreviewing how easy it was\
    \ to add those annotations, and observing\nwhether their presence increases code\
    \ understandability. PEP 484 PEP 484 The Python standard library should be conservative\
    \ in adopting such\nannotations, but their use is allowed for new code and for\
    \ big\nrefactorings. For code that wants to make a different use of function annotations\n\
    it is recommended to put a comment of the form:# type: ignore\n\n\nnear the top\
    \ of the file; this tells type checkers to ignore all\nannotations.  (More fine-grained\
    \ ways of disabling complaints from\ntype checkers can be found in PEP 484.)\n\
    \ near the top of the file; this tells type checkers to ignore all\nannotations.\
    \  (More fine-grained ways of disabling complaints from\ntype checkers can be\
    \ found in PEP 484.) PEP 484 Like linters, type checkers are optional, separate\
    \ tools.  Python\ninterpreters by default should not issue any messages due to\
    \ type\nchecking and should not alter their behavior based on annotations. Users\
    \ who don’t want to use type checkers are free to ignore them.\nHowever, it is\
    \ expected that users of third party library packages\nmay want to run type checkers\
    \ over those packages.  For this purpose\nPEP 484 recommends the use of stub files:\
    \ .pyi files that are read\nby the type checker in preference of the corresponding\
    \ .py files.\nStub files can be distributed with a library, or separately (with\n\
    the library author’s permission) through the typeshed repo [5]. PEP 484 [5] Variable\
    \ Annotations Variable Annotations PEP 526 introduced variable annotations. The\
    \ style recommendations for them are\nsimilar to those on function annotations\
    \ described above: PEP 526 \nAnnotations for module level variables, class and\
    \ instance variables,\nand local variables should have a single space after the\
    \ colon.\nThere should be no space before the colon.\nIf an assignment has a right\
    \ hand side, then the equality sign should have\nexactly one space on both sides:#\
    \ Correct:\n\ncode: int\n\nclass Point:\n    coords: Tuple[int, int]\n    label:\
    \ str = '<unknown>'\n\n\n# Wrong:\n\ncode:int  # No space after colon\ncode :\
    \ int  # Space before colon\n\nclass Test:\n    result: int=0  # No spaces around\
    \ equality sign\n\n\n\nAlthough the PEP 526 is accepted for Python 3.6, the variable\
    \ annotation\nsyntax is the preferred syntax for stub files on all versions of\
    \ Python\n(see PEP 484 for details).\n Annotations for module level variables,\
    \ class and instance variables,\nand local variables should have a single space\
    \ after the colon. There should be no space before the colon. If an assignment\
    \ has a right hand side, then the equality sign should have\nexactly one space\
    \ on both sides:# Correct:\n\ncode: int\n\nclass Point:\n    coords: Tuple[int,\
    \ int]\n    label: str = '<unknown>'\n\n\n# Wrong:\n\ncode:int  # No space after\
    \ colon\ncode : int  # Space before colon\n\nclass Test:\n    result: int=0  #\
    \ No spaces around equality sign\n\n\n Although the PEP 526 is accepted for Python\
    \ 3.6, the variable annotation\nsyntax is the preferred syntax for stub files\
    \ on all versions of Python\n(see PEP 484 for details). PEP 526 PEP 484 Footnotes\
    \ 1 References References 2 http://barry.warsaw.us/software/STYLEGUIDE.txt 3 4\
    \ http://www.wikipedia.com/wiki/CamelCase 5 https://github.com/python/typeshed\
    \ Copyright Copyright This document has been placed in the public domain. Source:\
    \ https://github.com/python/peps/blob/main/pep-0008.txt https://github.com/python/peps/blob/main/pep-0008.txt\
    \ Last modified: 2023-04-30 14:23:54 GMT 2023-04-30 14:23:54 GMT Contents \nIntroduction\n\
    A Foolish Consistency is the Hobgoblin of Little Minds\nCode Lay-out\nIndentation\n\
    Tabs or Spaces?\nMaximum Line Length\nShould a Line Break Before or After a Binary\
    \ Operator?\nBlank Lines\nSource File Encoding\nImports\nModule Level Dunder Names\n\
    \n\nString Quotes\nWhitespace in Expressions and Statements\nPet Peeves\nOther\
    \ Recommendations\n\n\nWhen to Use Trailing Commas\nComments\nBlock Comments\n\
    Inline Comments\nDocumentation Strings\n\n\nNaming Conventions\nOverriding Principle\n\
    Descriptive: Naming Styles\nPrescriptive: Naming Conventions\nNames to Avoid\n\
    ASCII Compatibility\nPackage and Module Names\nClass Names\nType Variable Names\n\
    Exception Names\nGlobal Variable Names\nFunction and Variable Names\nFunction\
    \ and Method Arguments\nMethod Names and Instance Variables\nConstants\nDesigning\
    \ for Inheritance\n\n\nPublic and Internal Interfaces\n\n\nProgramming Recommendations\n\
    Function Annotations\nVariable Annotations\n\n\nReferences\nCopyright\n Introduction\
    \ Introduction A Foolish Consistency is the Hobgoblin of Little Minds A Foolish\
    \ Consistency is the Hobgoblin of Little Minds Code Lay-out\nIndentation\nTabs\
    \ or Spaces?\nMaximum Line Length\nShould a Line Break Before or After a Binary\
    \ Operator?\nBlank Lines\nSource File Encoding\nImports\nModule Level Dunder Names\n\
    \n Code Lay-out \nIndentation\nTabs or Spaces?\nMaximum Line Length\nShould a\
    \ Line Break Before or After a Binary Operator?\nBlank Lines\nSource File Encoding\n\
    Imports\nModule Level Dunder Names\n Indentation Indentation Tabs or Spaces? Tabs\
    \ or Spaces? Maximum Line Length Maximum Line Length Should a Line Break Before\
    \ or After a Binary Operator? Should a Line Break Before or After a Binary Operator?\
    \ Blank Lines Blank Lines Source File Encoding Source File Encoding Imports Imports\
    \ Module Level Dunder Names Module Level Dunder Names String Quotes String Quotes\
    \ Whitespace in Expressions and Statements\nPet Peeves\nOther Recommendations\n\
    \n Whitespace in Expressions and Statements \nPet Peeves\nOther Recommendations\n\
    \ Pet Peeves Pet Peeves Other Recommendations Other Recommendations When to Use\
    \ Trailing Commas When to Use Trailing Commas Comments\nBlock Comments\nInline\
    \ Comments\nDocumentation Strings\n\n Comments \nBlock Comments\nInline Comments\n\
    Documentation Strings\n Block Comments Block Comments Inline Comments Inline Comments\
    \ Documentation Strings Documentation Strings Naming Conventions\nOverriding Principle\n\
    Descriptive: Naming Styles\nPrescriptive: Naming Conventions\nNames to Avoid\n\
    ASCII Compatibility\nPackage and Module Names\nClass Names\nType Variable Names\n\
    Exception Names\nGlobal Variable Names\nFunction and Variable Names\nFunction\
    \ and Method Arguments\nMethod Names and Instance Variables\nConstants\nDesigning\
    \ for Inheritance\n\n\nPublic and Internal Interfaces\n\n Naming Conventions \n\
    Overriding Principle\nDescriptive: Naming Styles\nPrescriptive: Naming Conventions\n\
    Names to Avoid\nASCII Compatibility\nPackage and Module Names\nClass Names\nType\
    \ Variable Names\nException Names\nGlobal Variable Names\nFunction and Variable\
    \ Names\nFunction and Method Arguments\nMethod Names and Instance Variables\n\
    Constants\nDesigning for Inheritance\n\n\nPublic and Internal Interfaces\n Overriding\
    \ Principle Overriding Principle Descriptive: Naming Styles Descriptive: Naming\
    \ Styles Prescriptive: Naming Conventions\nNames to Avoid\nASCII Compatibility\n\
    Package and Module Names\nClass Names\nType Variable Names\nException Names\n\
    Global Variable Names\nFunction and Variable Names\nFunction and Method Arguments\n\
    Method Names and Instance Variables\nConstants\nDesigning for Inheritance\n\n\
    \ Prescriptive: Naming Conventions \nNames to Avoid\nASCII Compatibility\nPackage\
    \ and Module Names\nClass Names\nType Variable Names\nException Names\nGlobal\
    \ Variable Names\nFunction and Variable Names\nFunction and Method Arguments\n\
    Method Names and Instance Variables\nConstants\nDesigning for Inheritance\n Names\
    \ to Avoid Names to Avoid ASCII Compatibility ASCII Compatibility Package and\
    \ Module Names Package and Module Names Class Names Class Names Type Variable\
    \ Names Type Variable Names Exception Names Exception Names Global Variable Names\
    \ Global Variable Names Function and Variable Names Function and Variable Names\
    \ Function and Method Arguments Function and Method Arguments Method Names and\
    \ Instance Variables Method Names and Instance Variables Constants Constants Designing\
    \ for Inheritance Designing for Inheritance Public and Internal Interfaces Public\
    \ and Internal Interfaces Programming Recommendations\nFunction Annotations\n\
    Variable Annotations\n\n Programming Recommendations \nFunction Annotations\n\
    Variable Annotations\n Function Annotations Function Annotations Variable Annotations\
    \ Variable Annotations References References Copyright Copyright Page Source (GitHub)"
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    import requests
    from bs4 import BeautifulSoup
    import os
    import shutil
    from colorama import Fore
    import sys
    import re
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = os.path.join(os.curdir, 'tb_tabs')
            return [
                TestCase(
                    stdin='docs.python.org\nexit',
                    attach='docs.python.org',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    attach=None,
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='back\nexit',
                    attach='back',
                    args=['tb_tabs']
                ),
                TestCase(
                    stdin='peps.python.org/pep-0008/\ndocs.python.org\npeps\nexit',
                    attach=('peps.python.org/pep-0008/', 'docs.python.org', 'peps.python.org/pep-0008/'),
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='peps.python.org/pep-0008/\ndocs.python.org\nback\nexit',
                    attach=('peps.python.org/pep-0008/', 'docs.python.org', 'docs.python.org'),
                    args=['tb_tabs']
                )
            ]

        def check_output(self, output_text, links, not_links, source):
            """
            :param output_text: the text from the user's file or from the console output
            :param links: list with links highlighted with blue
            :param not_links: list with text that was taken from other tags than <a>
            :param source: the name of the file from which the user's text is taken or "console output" line
            :return: raises WrongAnswer if a highlighted link is not found in the output_text,
            or if a non-link text is not found in the output_text,
            or if a non-link text is highlighted with blue
            """
            output_text = re.sub(r'\s', ' ', output_text)
            for i, link in enumerate(links):
                link = re.sub(r'\s', ' ', link)
                links[i] = link
                if not link:
                    continue
                if link not in output_text:
                    raise WrongAnswer(f"In {source} the following link is missing: \n"
                                      f"{link}")
                if Fore.BLUE + link not in output_text:
                    raise WrongAnswer(f"In {source} the following link is not highlighted with blue: \n"
                                      f"{link}")

            for line in not_links:
                line = re.sub(r'\s', ' ', line)
                highlighted_version = Fore.BLUE + line
                # the following conditions is put here in case some text from non-link tags coincides with some link's text
                if highlighted_version in links:
                    continue

                if line not in output_text:
                    raise WrongAnswer(f"In {source} the following text is not found:\n"
                                      f"{line}\n"
                                      f"Make sure you extract all the text from the page.\n"
                                      f"Also, make sure you don't highlight any parts of this text with blue, \n"
                                      f"and don't put any escape sequences in it.")

                if highlighted_version in output_text:
                    raise WrongAnswer(f"In {source} the following text is highlighted with blue:\n"
                                      f"{highlighted_version}\n"
                                      f"Make sure you highlight only the links.")

        @staticmethod
        def get_links_and_text(url):

            url = f'https://{url}'
            user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) " \
                         "Chrome/70.0.3538.77 Safari/537.36"
            try:
                page = requests.get(url, headers={'User-Agent': user_agent})
            except requests.exceptions.ConnectionError:
                raise WrongAnswer(f"An error occurred while tests tried to connect to the page {url}.\n"
                                  f"Please try again a bit later.")
            soup = BeautifulSoup(page.content, 'html.parser')
            links = []
            links_tags = soup.find_all("a")
            for tag in links_tags:
                link_text = str(tag.text.strip())
                if link_text:
                    links.append(link_text)
            not_links = []
            for tag in soup.find_all(["h1", "p"]):
                tag_text = str(tag.text.strip())
                if tag not in links_tags and tag_text and "<a" not in str(tag) and tag_text not in links:
                    not_links.append(tag_text)

            return links, not_links

        def check_correct_url(self, attach_0, reply):
            links, not_links = TextBasedBrowserTest.get_links_and_text(attach_0)
            self.check_output(reply, links, not_links, "the console output")

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if 'invalid url' in reply.lower():
                    return CheckResult.correct()
                else:
                    return CheckResult.wrong('An invalid URL was input to your program.\n'
                                             'Your program should print \'Invalid URL\'.')

            if attach == 'back':
                if not reply:
                    return CheckResult.correct()
                else:
                    return CheckResult.wrong(f'There should be no output. But your program printed: {reply}')

            # Correct URL
            path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

            if not os.path.isdir(path_for_tabs):
                return CheckResult.wrong("There is no directory for tabs")

            if isinstance(attach, tuple):
                for element in attach:
                    attach_0 = element
                    self.check_correct_url(attach_0, reply)

            elif isinstance(attach, str):
                attach_0 = attach
                self.check_correct_url(attach_0, reply)

            try:
                shutil.rmtree(path_for_tabs)
            except PermissionError:
                return CheckResult.wrong("Impossible to remove the directory for tabs. Perhaps you haven't closed some file?")

            return CheckResult.correct()


    if __name__ == '__main__':
        TextBasedBrowserTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TextBasedBrowserTest

    if __name__ == '__main__':
        TextBasedBrowserTest().run_tests()
  learner_created: false
- name: tb_tabs/peps
  visible: true
  learner_created: true
- name: tb_tabs/docs
  visible: true
  learner_created: true
- name: new_dir/docs
  visible: true
  learner_created: true
- name: new_dir/google
  visible: true
  learner_created: true
- name: new_dir/yahoo
  visible: true
  learner_created: true
- name: new_dir/python
  visible: true
  learner_created: true
- name: new_dir/peps
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7215#comment
status: Failed
feedback:
  message: |-
    Exception in test #1

    Traceback (most recent call last):
      File "browser.py", line 74, in <module>
        content = get_page(inp)
                  ^^^^^^^^^^^^^
      File "browser.py", line 52, in get_page
        return output.readlines()
               ^^^^^^^^^^^^^^^^^^
    UnicodeDecodeError: 'utf-8' codec can't decode byte 0x92 in position 845: invalid start byte

    Please find below the output of your program during this failed test.
    Note that the '>' character indicates the beginning of the input line.

    ---

    Arguments: .\tb_tabs

    > docs.python.org
  time: "Wed, 17 May 2023 21:06:39 UTC"
record: -1
