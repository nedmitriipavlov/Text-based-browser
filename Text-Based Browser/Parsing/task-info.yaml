type: edu
files:
- name: browser.py
  visible: true
  text: |-
    import os
    import sys
    import requests
    from bs4 import BeautifulSoup

    dir_path = sys.argv[-1]
    stack = []

    if not os.access(dir_path, os.F_OK):
        os.mkdir(dir_path)

    os.chdir(dir_path)


    def filename(url):
        return url[:url.index('.')]

    def valid_url(url):
        if url.count('.') >= 1:
            return True

    def get_page(url):
        name = filename(url)
        if valid_url(url) and not os.access(filename(url), os.F_OK):
            if not url.startswith('https://'):
                url = 'https://' + url
            r = requests.get(url).text
            with open(name, 'w', encoding='utf-8') as output:
                output.write(r)
            with open(name, 'r', encoding='utf-8') as output:
                return ''.join(output.readlines())
        else:
            with open(name, 'r', encoding='utf-8') as output:
                return ''.join(output.readlines())


    def back_button(lst):
        if len(lst) >= 2:
            lst.pop()
            return lst.pop()

    def site_var(url):
        return url.replace('.', '_')

    while True:
        inp = input()
        if inp == 'exit':
            break
        if inp == 'back':
            previous_page = back_button(stack)
            if previous_page:
                print(previous_page)
            else:
                continue
        try:
            content = get_page(inp)
            print(get_page(inp))
            stack.append(content)
        except:
            print('Invalid URL')
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    import requests
    import os
    import shutil
    from bs4 import BeautifulSoup
    import sys

    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = os.path.join(os.curdir, 'tb_tabs')
            return [
                TestCase(
                    stdin='docs.python.org\nexit',
                    attach='docs.python.org',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    attach=None,
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='back\nexit',
                    attach='back',
                    args=['tb_tabs']
                ),
                TestCase(
                    stdin='peps.python.org/pep-0008/\ndocs.python.org\npeps\nexit',
                    attach=('peps.python.org/pep-0008/', 'docs.python.org', 'peps.python.org/pep-0008/'),
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='peps.python.org/pep-0008/\ndocs.python.org\nback\nexit',
                    attach=('peps.python.org/pep-0008/', 'docs.python.org', 'docs.python.org'),
                    args=['tb_tabs']
                )
            ]

        def check_output(self, output_text: str, ideal_text: list, page_code: list, source: str):
            """
            :param output_text: the text from the user's file or from the console output
            :param ideal_text: the text from the web page (without HTML tags)
            :param page_code: the text from the web page with HTML tags
            :param source: the name of the file from which the user's text is taken or "console output" line
            :return: raises WrongAnswer if an HTML tag is found in the output_text
            or if a word from the ideal_text is not found in the output_text
            """
            for line in page_code:
                if line not in ideal_text and line in output_text:
                    raise WrongAnswer(f"The following token is present in the {source} even though it's not expected "
                                      f"to be there:\n\'{line}\'\n"
                                      f"Make sure you get rid of all HTML tags.")
            output_text = ''.join(char for char in output_text if char.isalnum())
            for line in ideal_text:
                line_without_spaces = ''.join(char for char in line if char.isalnum())
                if line_without_spaces.strip() not in output_text:
                    raise WrongAnswer(f"The following token is missing from the {source}:\n"
                                      f"\'{line}\'\n"
                                      f"Make sure you get all the text from the web page.")

        def _check_files(self, path_for_tabs: str, ideal_page: list, page_code: list, attach: str):
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param ideal_page: the text from the web page (without HTML tags)
            :param page_code: the text from the web page with HTML tags
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            name = attach.split('.')[0]
            if name in filenames:
                print("found file: {}".format(name))
                with open(os.path.join(path_for_tabs, name), 'r', encoding='utf-8') as tab:
                    try:
                        content = tab.read()
                    except UnicodeDecodeError:
                        raise WrongAnswer('An error occurred while reading your saved tab. '
                                          'Perhaps you used the wrong encoding?')
                    self.check_output(content, ideal_page, page_code, "file " + name)

            else:
                raise WrongAnswer(f"Couldn't find file with the name {name}.\n"
                                  f"Make sure you saved the tab and named it correctly.")

        @staticmethod
        def get_page_and_code(url):
            """
            :param url: url link that the program is requested to open
            :return: list with strings of clean text and list of strings with text with HTML tags
            """

            url = f'https://{url}'
            user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) " \
                         "Chrome/70.0.3538.77 Safari/537.36"
            try:
                page = requests.get(url, headers={'User-Agent': user_agent})
            except requests.exceptions.ConnectionError:
                raise WrongAnswer(f"An error occurred while tests tried to connect to the page {url}.\n"
                                  f"Please try again a bit later.")
            soup = BeautifulSoup(page.content, 'html.parser')
            tags = soup.find_all(['p', 'a', 'h1', 'h2', 'ul', 'ol', 'li'])
            text = []
            tagged_text = []
            for tag in tags:
                tag_text = tag.text.strip()
                if tag_text:
                    text.append(tag_text)
                tag = str(tag)
                if tag.startswith('<'):
                    tagged_text.append(tag)
            return text, tagged_text

        def check_correct_url(self, attach_0: str, path_for_tabs: str, reply):

            ideal_text, page_code = TextBasedBrowserTest.get_page_and_code(attach_0)
            self._check_files(path_for_tabs, ideal_text, page_code, attach_0)
            self.check_output(reply, ideal_text, page_code, "console output")

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if 'invalid url' in reply.lower():
                    return CheckResult.correct()
                else:
                    return CheckResult.wrong('An invalid URL was input to your program.\n'
                                             'Your program should print \'Invalid URL\'.')

            if attach == 'back':
                if not reply:
                    return CheckResult.correct()
                else:
                    return CheckResult.wrong(f'There should be no output. But your program printed: {reply}')

            # Correct URL
            path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

            if not os.path.isdir(path_for_tabs):
                return CheckResult.wrong("There is no directory for tabs")

            if isinstance(attach, tuple):
                for element in attach:
                    attach_0 = element
                    self.check_correct_url(attach_0, path_for_tabs, reply)

            elif isinstance(attach, str):
                attach_0 = attach
                self.check_correct_url(attach_0, path_for_tabs, reply)

            try:
                shutil.rmtree(path_for_tabs)
            except PermissionError:
                return CheckResult.wrong("Impossible to remove the directory for tabs. "
                                         "Perhaps you haven't closed some file?")

            return CheckResult.correct()


    if __name__ == '__main__':
        TextBasedBrowserTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TextBasedBrowserTest

    if __name__ == '__main__':
        TextBasedBrowserTest().run_tests()
  learner_created: false
- name: tb_tabs/docs
  visible: true
  learner_created: true
- name: tb_tabs/peps
  visible: true
  learner_created: true
- name: dirs/peps
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7214#comment
status: Failed
feedback:
  message: "Wrong answer in test #1\n\nAn error occurred while reading your saved\
    \ tab. Perhaps you used the wrong encoding?\n\nPlease find below the output of\
    \ your program during this failed test.\nNote that the '>' character indicates\
    \ the beginning of the input line.\n\n---\n\nArguments: .\\tb_tabs\n\n[last 250\
    \ lines of output are shown, 75 skipped]\n    \n\n\n\n\n\n\n\n\n\n\n         \
    \            |\n                \n\n\nindex\nindex\n\nmodules |\nmodules\n\nPython\
    \ »\nPython\n\n\n\n\n\n\n\n3.11.3 Documentation »\n    \n3.11.3 Documentation\n\
    \n\n\n\n\n\n\n\n\n\n\n                     |\n                \nPython 3.11.3\
    \ documentation\n\n  Welcome! This is the official documentation for Python 3.11.3.\n\
    \  \nParts of the documentation:\nWhat's new in Python 3.11?\n or all \"What's\
    \ new\" documents since 2.0\nWhat's new in Python 3.11?\n or all \"What's new\"\
    \ documents since 2.0\nall \"What's new\" documents\nTutorial\nstart here\nTutorial\n\
    start here\nLibrary Reference\nkeep this under your pillow\nLibrary Reference\n\
    keep this under your pillow\nLanguage Reference\ndescribes syntax and language\
    \ elements\nLanguage Reference\ndescribes syntax and language elements\nPython\
    \ Setup and Usage\nhow to use Python on different platforms\nPython Setup and\
    \ Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents\
    \ on specific topics\nPython HOWTOs\nin-depth documents on specific topics\nInstalling\
    \ Python Modules\ninstalling from the Python Package Index & other sources\nInstalling\
    \ Python Modules\ninstalling from the Python Package Index & other sources\nDistributing\
    \ Python Modules\npublishing modules for installation by others\nDistributing\
    \ Python Modules\npublishing modules for installation by others\nExtending and\
    \ Embedding\ntutorial for C/C++ programmers\nExtending and Embedding\ntutorial\
    \ for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nPython/C\
    \ API\nreference for C/C++ programmers\nFAQs\nfrequently asked questions (with\
    \ answers!)\nFAQs\nfrequently asked questions (with answers!)\nIndices and tables:\n\
    Global Module Index\nquick access to all modules\nGlobal Module Index\nquick access\
    \ to all modules\nGeneral Index\nall functions, classes, terms\nGeneral Index\n\
    all functions, classes, terms\nGlossary\nthe most important terms explained\n\
    Glossary\nthe most important terms explained\nSearch page\nsearch this documentation\n\
    Search page\nsearch this documentation\nComplete Table of Contents\nlists all\
    \ sections and subsections\nComplete Table of Contents\nlists all sections and\
    \ subsections\nMeta information:\nReporting bugs\nReporting bugs\nContributing\
    \ to Docs\nContributing to Docs\nAbout the documentation\nAbout the documentation\n\
    History and License of Python\nHistory and License of Python\nCopyright\nCopyright\n\
    Download\nDownload these documents\nDownload these documents\nDocs by version\n\
    \nPython 3.12 (in development)\nPython 3.11 (stable)\nPython 3.10 (stable)\nPython\
    \ 3.9 (security-fixes)\nPython 3.8 (security-fixes)\nPython 3.7 (security-fixes)\n\
    Python 3.6 (EOL)\nPython 3.5 (EOL)\nPython 2.7 (EOL)\nAll versions\n\nPython 3.12\
    \ (in development)\nPython 3.12 (in development)\nPython 3.11 (stable)\nPython\
    \ 3.11 (stable)\nPython 3.10 (stable)\nPython 3.10 (stable)\nPython 3.9 (security-fixes)\n\
    Python 3.9 (security-fixes)\nPython 3.8 (security-fixes)\nPython 3.8 (security-fixes)\n\
    Python 3.7 (security-fixes)\nPython 3.7 (security-fixes)\nPython 3.6 (EOL)\nPython\
    \ 3.6 (EOL)\nPython 3.5 (EOL)\nPython 3.5 (EOL)\nPython 2.7 (EOL)\nPython 2.7\
    \ (EOL)\nAll versions\nAll versions\nOther resources\n\nPEP Index\nBeginner's\
    \ Guide\nBook List\nAudio/Visual Talks\nPython Developer’s Guide\n\nPEP Index\n\
    PEP Index\nBeginner's Guide\nBeginner's Guide\nBook List\nBook List\nAudio/Visual\
    \ Talks\nAudio/Visual Talks\nPython Developer’s Guide\nPython Developer’s Guide\n\
    Navigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.3 Documentation\
    \ »\n    \n\n\n\n\n\n\n\n\n\n\n                     |\n                \n\n\n\
    index\nindex\n\nmodules |\nmodules\n\nPython »\nPython\n\n\n\n\n\n\n\n3.11.3 Documentation\
    \ »\n    \n3.11.3 Documentation\n\n\n\n\n\n\n\n\n\n\n\n                     |\n\
    \                \nCopyright\nHistory and License\nPlease donate.\nFound a bug\n\
    Sphinx\n> exit"
  time: "Wed, 17 May 2023 20:00:47 UTC"
record: -1
